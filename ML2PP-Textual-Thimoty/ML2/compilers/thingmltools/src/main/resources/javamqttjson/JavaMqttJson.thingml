
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "mqtt/MQTTAdapterMsgs.thingml" from stl
import "mqtt/java/JavaMQTTAdapter.thingml" from stl
/*IMPORTS*/


thing /*THING_NAME*/ includes /*THING_INCLUDES*/ 
@java_import `import net.sf.json.*;`
@maven_dep `		
       <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>2.4</version>
            <classifier>jdk15</classifier>
        </dependency>`
{
	
	required port javamqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "/*MQTT_PORT_NAME*/"
	
	
	function subscribe_for_message(msg_name : String) do
		`String topic = `&mqtt_topic_name&` + "/" + `&msg_name&`;`
		javamqtt!mqtt_subscribe(`topic`)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		`String topic = `&mqtt_topic_name&` + "/" + `&msg_name&`;`
		javamqtt!mqtt_publish(`topic`, payload, size)
	end
	
	
	function mqtt_subscribe() do
/*SUBSCRIBE*/		
	end
	
	function mqtt_parsemsg(topic : String, payload : Buffer, len : UInt32) : Boolean do
		
		`try {`
		`JSONObject json = (JSONObject) JSONSerializer.toJSON(new String(`&payload&`, java.nio.charset.StandardCharsets.UTF_8));`
		`boolean __valid_msg = false;`
		
		`String[] split = `&topic&`.split("/");`
		`if (split.length != 2)` return false // This is not a valid message
		
		var portname : String = `split[0]`
		var msgname : String = `split[1]`
		
		if (`!split[0].equals(`&mqtt_topic_name&`)`) return false // This message is for another port
		
		`switch (`&msgname&`) {  
/*PARSEMSG*/
			default: break;
		}`

		return `__valid_msg`
		`} catch(Throwable t) {
			//t.printStackTrace();
			`error "Unable to parse message invalid message from topic ", topic, ". Payload: ", `new String(`&payload&`, java.nio.charset.StandardCharsets.UTF_8)` ," Message Dropped.\n"`
		}`
		return false
	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event javamqtt?mqtt_connected action mqtt_subscribe()
		internal event m : javamqtt?mqtt_message action mqtt_parsemsg(m.topic, m.payload, m.size)

/*SEND_HANDLERS*/

		state Running {}
		
	}
}

