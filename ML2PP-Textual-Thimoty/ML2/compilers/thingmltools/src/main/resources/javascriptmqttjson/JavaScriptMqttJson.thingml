
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

/*IMPORTS*/


thing /*THING_NAME*/ includes /*THING_INCLUDES*/ 
{
	
	required port jsmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "/*MQTT_PORT_NAME*/"
	
	
	function subscribe_for_message(msg_name : String) do
		readonly var topic : String = mqtt_topic_name + "/" + msg_name
		jsmqtt!mqtt_subscribe(topic)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		readonly var topic : String = mqtt_topic_name + "/" + msg_name
		jsmqtt!mqtt_publish(topic, payload, size)
	end
	
	
	function mqtt_subscribe() do
/*SUBSCRIBE*/		
	end
	
	function mqtt_parsemsg(topic : String, payload : Buffer, len : UInt32) : Boolean do
		`try {
			let json = JSON.parse(` & payload & `);
			let split = ` & topic & `.split('/');`
			`if (split.length != 2)` return false // This is not a valid message
			
			readonly var portname : String = `split[0]` as String
			readonly var msgname : String = `split[1]` as String
			
			if (portname != mqtt_topic_name) return false
			
			`switch (`&msgname&`) {  
				/*PARSEMSG*/
				default: break;
			}`
			
		`} catch(err) {`
			errorln "Unable to parse message invalid message from topic ", topic, ". Payload: ", payload ," Message Dropped."
			errorln `err`
		`}`
		return false
	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event jsmqtt?mqtt_connected action mqtt_subscribe()
		internal event m : jsmqtt?mqtt_message action mqtt_parsemsg(m.topic, m.payload, m.size)

		/*SEND_HANDLERS*/

		state Running {}
		
	}
}

