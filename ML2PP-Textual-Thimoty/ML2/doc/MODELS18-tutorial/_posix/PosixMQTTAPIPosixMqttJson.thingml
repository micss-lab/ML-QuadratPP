
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "posixmqttapi.thingml"



thing PosixMQTTAPI_PosixMqttJson_Impl includes PosixMQTTAPI, MQTTAdapterMsgs 
@c_header `#include "jsmn.h"`
{
	
	required port posixmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	function posixmqtt_subscribe() do
		posixmqtt!mqtt_subscribe("set_color" as String)
		posixmqtt!mqtt_subscribe("turn_off" as String)
		posixmqtt!mqtt_subscribe("turn_on" as String)
		
	end
	
	function posixmqtt_parsemsg(topic : String, payload : String, len : UInt32) : Boolean do
	
		// Variables to be used for parsing the JSON payload
		`jsmn_parser parser;
		jsmn_init(&parser);
		jsmntok_t tokens[32];` // 32 should be adjusted for the largest message to be parsed
		var parse_result : Int16
		
		// `printf("Topic:%s, Payload:%s\n", `&topic&`, `&payload&`);`
		
		parse_result = `jsmn_parse(&parser, `&payload&`, `&len&`, tokens, 32);`
	
			if (`strcmp(`&topic&`, "set_color") == 0`) do

			var id : UInt8
			var _found_id : Boolean = false
			var h : UInt16
			var _found_h : Boolean = false
			var s : UInt8
			var _found_s : Boolean = false
			var l : UInt8
			var _found_l : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for set_color message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 4) do
				error "JSON ERROR: incomplete payload for set_color message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for set_color message\n"
				return false
			end
			
			// parse parameters
			var i : UInt16 = 1
			while (i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&i&`].type` != 3 or `tokens[`&i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for set_color message\n"
					return false
				end
				
				if (`strncmp(`&payload&` + tokens[`&i&`].start , "id", tokens[`&i&`].end - tokens[`&i&`].start)` == 0) do
					// check the type of the parameter
					if (`tokens[`&i+1&`].type` != 4 or `tokens[`&i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for id in set_color message\n"
						return false
					end
					id = `strtol(`&payload&` + tokens[`&i+1&`].start, NULL, 10)`
					_found_id = true
				end
				else if (`strncmp(`&payload&` + tokens[`&i&`].start , "h", tokens[`&i&`].end - tokens[`&i&`].start)` == 0) do
					// check the type of the parameter
					if (`tokens[`&i+1&`].type` != 4 or `tokens[`&i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for h in set_color message\n"
						return false
					end
					h = `strtol(`&payload&` + tokens[`&i+1&`].start, NULL, 10)`
					_found_h = true
				end
				else if (`strncmp(`&payload&` + tokens[`&i&`].start , "s", tokens[`&i&`].end - tokens[`&i&`].start)` == 0) do
					// check the type of the parameter
					if (`tokens[`&i+1&`].type` != 4 or `tokens[`&i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for s in set_color message\n"
						return false
					end
					s = `strtol(`&payload&` + tokens[`&i+1&`].start, NULL, 10)`
					_found_s = true
				end
				else if (`strncmp(`&payload&` + tokens[`&i&`].start , "l", tokens[`&i&`].end - tokens[`&i&`].start)` == 0) do
					// check the type of the parameter
					if (`tokens[`&i+1&`].type` != 4 or `tokens[`&i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for l in set_color message\n"
						return false
					end
					l = `strtol(`&payload&` + tokens[`&i+1&`].start, NULL, 10)` 
					_found_l = true
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for set_color message\n"
				end
				i = i + 2 
			end
			if (not _found_id) error "JSON ERROR: Missing id parameter for message set_color\n"
			if (not _found_h) error "JSON ERROR: Missing h parameter for message set_color\n"
			if (not _found_s) error "JSON ERROR: Missing s parameter for message set_color\n"
			if (not _found_l) error "JSON ERROR: Missing l parameter for message set_color\n"

			if(_found_id and _found_h and _found_s and _found_l) do
				leds!set_color(id, h, s, l)
				return true
			end
			else return false

		end 
		else if (`strcmp(`&topic&`, "turn_off") == 0`) do

			var id : UInt8
			var _found_id : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for turn_off message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 1) do
				error "JSON ERROR: incomplete payload for turn_off message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for turn_off message\n"
				return false
			end
			
			// parse parameters
			var i : UInt16 = 1
			while (i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&i&`].type` != 3 or `tokens[`&i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for turn_off message\n"
					return false
				end
				
				if (`strncmp(`&payload&` + tokens[`&i&`].start , "id", tokens[`&i&`].end - tokens[`&i&`].start)` == 0) do
					// check the type of the parameter
					if (`tokens[`&i+1&`].type` != 4 or `tokens[`&i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for id in turn_off message\n"
						return false
					end
					id = `strtol(`&payload&` + tokens[`&i+1&`].start, NULL, 10)`
					_found_id = true
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for turn_off message\n"
				end
				i = i + 2 
			end
			if (not _found_id) error "JSON ERROR: Missing id parameter for message turn_off\n"

			if(_found_id) do
				leds!turn_off(id)
				return true
			end
			else return false

		end 
		else if (`strcmp(`&topic&`, "turn_on") == 0`) do

			var id : UInt8
			var _found_id : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for turn_on message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 1) do
				error "JSON ERROR: incomplete payload for turn_on message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for turn_on message\n"
				return false
			end
			
			// parse parameters
			var i : UInt16 = 1
			while (i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&i&`].type` != 3 or `tokens[`&i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for turn_on message\n"
					return false
				end
				
				if (`strncmp(`&payload&` + tokens[`&i&`].start , "id", tokens[`&i&`].end - tokens[`&i&`].start)` == 0) do
					// check the type of the parameter
					if (`tokens[`&i+1&`].type` != 4 or `tokens[`&i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for id in turn_on message\n"
						return false
					end
					id = `strtol(`&payload&` + tokens[`&i+1&`].start, NULL, 10)`
					_found_id = true
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for turn_on message\n"
				end
				i = i + 2 
			end
			if (not _found_id) error "JSON ERROR: Missing id parameter for message turn_on\n"

			if(_found_id) do
				leds!turn_on(id)
				return true
			end
			else return false

		end 
		else
		do
			print "Received an unhandled message\n"
		end
		
		return false

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event posixmqtt?mqtt_connected action posixmqtt_subscribe()
		internal event m : posixmqtt?mqtt_message action posixmqtt_parsemsg(m.topic, m.payload, m.size)

		internal event e:leds?ready action do
			`char payload[2];`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			posixmqtt!mqtt_publish("ready", `payload` as String, `strlen(payload)` as Integer)
		end



		state Running {}
		
	}
}

