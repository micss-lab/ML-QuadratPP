import "datatypes.thingml" from stl

thing fragment API {
	
	readonly property ID : UInt8 = 0 
	readonly property N : UInt8 = 8 //Size of the LED strip
	
	function id(userID : UInt8, ledID : UInt8) : UInt8 do
		print "id(userID : ", userID, ", ledID : ", ledID, ") = ", (N*userID + ledID)
		return N*userID + ledID //takes a userID and a ledID (0..N) to produce a unique ID for the led
	end
	function sid(userID : UInt8, ledID : UInt8) : UInt8 do
		print "sid(userID : ", userID, ", ledID : ", ledID, ") = ", (ledID - N*userID)
		return ledID - N*userID //takes a userID and a unique ledID to produce a simple ledID in (0..N)
	end
	
	message set_color(id : UInt8, h : UInt16, s : UInt8, l : UInt8) //sets the color of LED id, using a fancy HSL schema
	message turn_on(id : UInt8)                                    //turn on LED id
	message turn_off(id : UInt8)                                   //turn off LED id
	message ready()
	
	message a()
	message b()
	message c()
}

thing fragment CLIENT includes API {
	
	required port leds {
		receives ready		
		sends set_color, turn_off, turn_on
	}
	
	required port buttons {
		receives a, b, c
	}
	
}

thing fragment DRIVER includes API {
	
	function _ini() do
		ini()
		leds!ready()
	end
	
	abstract function ini()
	
	abstract function turn_on(id : UInt8)
	
	abstract function turn_off(id : UInt8)
	
	abstract function set_color(id : UInt8, h : UInt16, s : UInt8, l : UInt8)
	
	provided port leds {
		sends ready		
		receives set_color, turn_off, turn_on
	}
	
	provided port buttons {
		sends a, b, c
	}
	
	statechart Behavior init Init {
		
		on entry _ini()
		
		state Init {						
			internal event e : leds?turn_on
			action turn_on(e.id)
			
			internal event e : leds?turn_off
			action turn_off(e.id)
			
			internal event e : leds?set_color
			action set_color(e.id, e.h, e.s, e.l)
		}
	}
	
}