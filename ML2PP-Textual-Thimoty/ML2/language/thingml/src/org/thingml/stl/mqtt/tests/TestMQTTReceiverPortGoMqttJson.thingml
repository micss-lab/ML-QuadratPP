
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "MQTTEchoTestClientGo.thingml"



thing TestMQTTReceiverPort_GoMqttJson_Impl includes TestMQTTReceiverPort, MQTTAdapterMsgs 
@go_import "encoding/json"
@go_import "strings"
{
	
	required port gomqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "receiver"
	
	
	function subscribe_for_message(msg_name : String) do
		readonly var topic : String = mqtt_topic_name + "/" + msg_name
		gomqtt!mqtt_subscribe(topic)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		readonly var topic : String = mqtt_topic_name + "/" + msg_name
		gomqtt!mqtt_publish(topic, payload, size)
	end
	
	
	function mqtt_subscribe() do
		
	end
	
	function mqtt_parsemsg(topic : String, payload : Buffer, length : UInt32) : Boolean do
		`
		var split = strings.Split(`& topic & `, "/")
		if (len(split) != 2) {` 
			return false
		`}`
		
		readonly var portname : String = `split[0]` as String
		readonly var msgname : String = `split[1]` as String
			
		if (portname != mqtt_topic_name) return false
		
		`switch (` & msgname & `) {  
			
			default: break;
		}`
		
		return true
	end
	
	
	statechart GoMQTTJSonSC init Running {
	
		internal event gomqtt?mqtt_connected action mqtt_subscribe()
		internal event m : gomqtt?mqtt_message action mqtt_parsemsg(m.topic, m.payload, m.size)

				internal event e:receiver?no_parameters action do
			// Sending for receiver!no_parameters
			`j := FragmentTestMQTTMsgsMsgno_parameters{}
			payload, err := json.Marshal(j)
			if (err == nil){`
				publish_message("no_parameters", `payload` as Buffer, `len(payload)` as UInt32)
			`}`
		end

		internal event e:receiver?some_numbers action do
			// Sending for receiver!some_numbers
			`j := FragmentTestMQTTMsgsMsgsome_numbers{` & e.i8 & `,` & e.ui8 & `,` & e.i & `,` & e.ui & `,` & e.d & `,` & e.l & `,}
			payload, err := json.Marshal(j)
			if (err == nil){`
				publish_message("some_numbers", `payload` as Buffer, `len(payload)` as UInt32)
			`}`
		end

		internal event e:receiver?some_strings action do
			// Sending for receiver!some_strings
			`j := FragmentTestMQTTMsgsMsgsome_strings{` & e.c & `,` & e.str & `,}
			payload, err := json.Marshal(j)
			if (err == nil){`
				publish_message("some_strings", `payload` as Buffer, `len(payload)` as UInt32)
			`}`
		end

		internal event e:receiver?some_bytes action do
			// Sending for receiver!some_bytes
			`j := FragmentTestMQTTMsgsMsgsome_bytes{` & e.b1 & `,` & e.b2 & `,}
			payload, err := json.Marshal(j)
			if (err == nil){`
				publish_message("some_bytes", `payload` as Buffer, `len(payload)` as UInt32)
			`}`
		end

		internal event e:receiver?some_enum action do
			// Sending for receiver!some_enum
			`j := FragmentTestMQTTMsgsMsgsome_enum{` & e.d0 & `,` & e.d1 & `,}
			payload, err := json.Marshal(j)
			if (err == nil){`
				publish_message("some_enum", `payload` as Buffer, `len(payload)` as UInt32)
			`}`
		end



		state Running {}
		
	}
}

