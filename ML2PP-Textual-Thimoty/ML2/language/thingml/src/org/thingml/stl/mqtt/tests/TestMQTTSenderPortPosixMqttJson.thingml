
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "TestMQTTPorts.thingml"



thing TestMQTTSenderPort_PosixMqttJson_Impl includes TestMQTTSenderPort, MQTTAdapterMsgs 
@c_header `#include "jsmn.h"`
{
	
	required port posixmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "sender"
	
	
	function subscribe_for_message(msg_name : String) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_subscribe(`topic`)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_publish(`topic`, payload, size)
	end
	
	function posixmqtt_subscribe() do
		subscribe_for_message("no_parameters" as String)
		subscribe_for_message("some_numbers" as String)
		subscribe_for_message("some_strings" as String)
		subscribe_for_message("some_bytes" as String)
		subscribe_for_message("some_enum" as String)
		
	end
	
	function posixmqtt_parsemsg(topic : String, payload : String, len : UInt32) : Boolean do
	
		// Variables to be used for parsing the JSON payload
		`jsmn_parser parser;
		jsmn_init(&parser);
		jsmntok_t tokens[32];` // 32 should be adjusted for the largest message to be parsed
		var parse_result : Int16
		
		// Check that this is a message for this port
		`int mqtt_topic_name_length = strlen(`&mqtt_topic_name&`);`
		if (`!(strlen(`&topic&`) > mqtt_topic_name_length+1)`) return false
		if (`strncmp(`&topic&`, `&mqtt_topic_name&`, mqtt_topic_name_length) != 0`) return false
		if (`!(`&topic&`[mqtt_topic_name_length] == '/')`) return false
		
		var msg_name : String = `&`&topic&`[mqtt_topic_name_length+1]`
		
		parse_result = `jsmn_parse(&parser, `&payload&`, `&len&`, tokens, 32);`
	
			if (`strcmp(`&msg_name&`, "no_parameters") == 0`) do


						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for no_parameters message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 0) do
				error "JSON ERROR: incomplete payload for no_parameters message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for no_parameters message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for no_parameters message\n"
					return false
				end
				
				
				do
					print "JSON WARNING: got unknown parameters for no_parameters message\n"
				end
				__parse_i = __parse_i + 2 
			end

				sender!no_parameters()
				return true

		end 
		else if (`strcmp(`&msg_name&`, "some_numbers") == 0`) do

			var i8 : Int8
			var _found_i8 : Boolean = false
			var ui8 : UInt8
			var _found_ui8 : Boolean = false
			var i : Integer
			var _found_i : Boolean = false
			var ui : UInt16
			var _found_ui : Boolean = false
			var d : Double
			var _found_d : Boolean = false
			var l : Int64
			var _found_l : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for some_numbers message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 6) do
				error "JSON ERROR: incomplete payload for some_numbers message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for some_numbers message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for some_numbers message\n"
					return false
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "i8", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for i8 in some_numbers message\n"
						return false
					end
					i8 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_i8 = true
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 3`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "ui8", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for ui8 in some_numbers message\n"
						return false
					end
					ui8 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_ui8 = true
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 1`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "i", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for i in some_numbers message\n"
						return false
					end
					i = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_i = true
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "ui", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for ui in some_numbers message\n"
						return false
					end
					ui = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_ui = true
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 1`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "d", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for d in some_numbers message\n"
						return false
					end
					d = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_d = true
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 1`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "l", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for l in some_numbers message\n"
						return false
					end
					l = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_l = true
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for some_numbers message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_i8) error "JSON ERROR: Missing i8 parameter for message some_numbers\n"
			if (not _found_ui8) error "JSON ERROR: Missing ui8 parameter for message some_numbers\n"
			if (not _found_i) error "JSON ERROR: Missing i parameter for message some_numbers\n"
			if (not _found_ui) error "JSON ERROR: Missing ui parameter for message some_numbers\n"
			if (not _found_d) error "JSON ERROR: Missing d parameter for message some_numbers\n"
			if (not _found_l) error "JSON ERROR: Missing l parameter for message some_numbers\n"

			if(_found_i8 and _found_ui8 and _found_i and _found_ui and _found_d and _found_l) do
				sender!some_numbers(i8, ui8, i, ui, d, l)
				return true
			end
			else do
				error "JSON ERROR: Dropping message some_numbers because of missing parameters\n"
				return false
			end

		end 
		else if (`strcmp(`&msg_name&`, "some_strings") == 0`) do

			var c : Char
			var _found_c : Boolean = false
			var str : String
			var _found_str : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for some_strings message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 2) do
				error "JSON ERROR: incomplete payload for some_strings message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for some_strings message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for some_strings message\n"
					return false
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 1`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "c", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for c in some_strings message\n"
						return false
					end
					error "JSON ERROR: Cannot parse parameter c of type char (type is not supported)\n" 
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 3`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "str", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for str in some_strings message\n"
						return false
					end
					error "JSON ERROR: Cannot parse parameter str of type char * (type is not supported)\n" 
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for some_strings message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_c) error "JSON ERROR: Missing c parameter for message some_strings\n"
			if (not _found_str) error "JSON ERROR: Missing str parameter for message some_strings\n"

			if(_found_c and _found_str) do
				sender!some_strings(c, str)
				return true
			end
			else do
				error "JSON ERROR: Dropping message some_strings because of missing parameters\n"
				return false
			end

		end 
		else if (`strcmp(`&msg_name&`, "some_bytes") == 0`) do

			var b1 : Byte
			var _found_b1 : Boolean = false
			var b2 : Byte
			var _found_b2 : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for some_bytes message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 2) do
				error "JSON ERROR: incomplete payload for some_bytes message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for some_bytes message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for some_bytes message\n"
					return false
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "b1", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for b1 in some_bytes message\n"
						return false
					end
					b1 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_b1 = true
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "b2", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for b2 in some_bytes message\n"
						return false
					end
					b2 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_b2 = true
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for some_bytes message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_b1) error "JSON ERROR: Missing b1 parameter for message some_bytes\n"
			if (not _found_b2) error "JSON ERROR: Missing b2 parameter for message some_bytes\n"

			if(_found_b1 and _found_b2) do
				sender!some_bytes(b1, b2)
				return true
			end
			else do
				error "JSON ERROR: Dropping message some_bytes because of missing parameters\n"
				return false
			end

		end 
		else if (`strcmp(`&msg_name&`, "some_enum") == 0`) do

			var d0 : DigitalState
			var _found_d0 : Boolean = false
			var d1 : DigitalState
			var _found_d1 : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for some_enum message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 2) do
				error "JSON ERROR: incomplete payload for some_enum message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for some_enum message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for some_enum message\n"
					return false
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "d0", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for d0 in some_enum message\n"
						return false
					end
					d0 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_d0 = true
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "d1", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for d1 in some_enum message\n"
						return false
					end
					d1 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_d1 = true
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for some_enum message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_d0) error "JSON ERROR: Missing d0 parameter for message some_enum\n"
			if (not _found_d1) error "JSON ERROR: Missing d1 parameter for message some_enum\n"

			if(_found_d0 and _found_d1) do
				sender!some_enum(d0, d1)
				return true
			end
			else do
				error "JSON ERROR: Dropping message some_enum because of missing parameters\n"
				return false
			end

		end 
		else
		do
			print "Received an unhandled message\n"
		end
		
		return false

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event posixmqtt?mqtt_connected action posixmqtt_subscribe()
		internal event m : posixmqtt?mqtt_message action posixmqtt_parsemsg(m.topic, m.payload, m.size)



		state Running {}
		
	}
}

