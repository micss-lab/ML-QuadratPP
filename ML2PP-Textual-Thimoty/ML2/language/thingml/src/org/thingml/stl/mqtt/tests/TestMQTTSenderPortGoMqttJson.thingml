
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "MQTTEchoTestClientGo.thingml"



thing TestMQTTSenderPort_GoMqttJson_Impl includes TestMQTTSenderPort, MQTTAdapterMsgs 
@go_import "encoding/json"
@go_import "strings"
{
	
	required port gomqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "sender"
	
	
	function subscribe_for_message(msg_name : String) do
		readonly var topic : String = mqtt_topic_name + "/" + msg_name
		gomqtt!mqtt_subscribe(topic)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		readonly var topic : String = mqtt_topic_name + "/" + msg_name
		gomqtt!mqtt_publish(topic, payload, size)
	end
	
	
	function mqtt_subscribe() do
		subscribe_for_message("no_parameters")
		subscribe_for_message("some_numbers")
		subscribe_for_message("some_strings")
		subscribe_for_message("some_bytes")
		subscribe_for_message("some_enum")
		
	end
	
	function mqtt_parsemsg(topic : String, payload : Buffer, length : UInt32) : Boolean do
		`
		var split = strings.Split(`& topic & `, "/")
		if (len(split) != 2) {` 
			return false
		`}`
		
		readonly var portname : String = `split[0]` as String
		readonly var msgname : String = `split[1]` as String
			
		if (portname != mqtt_topic_name) return false
		
		`switch (` & msgname & `) {  
			
			case "no_parameters" :
			j := FragmentTestMQTTMsgsMsgno_parameters{}
err := json.Unmarshal([]byte(` & payload & `), &j)
if (err != nil){
return false
}
`sender!no_parameters()`
break

			case "some_numbers" :
			j := FragmentTestMQTTMsgsMsgsome_numbers{}
err := json.Unmarshal([]byte(` & payload & `), &j)
if (err != nil){
return false
}
				___i8 := j.I8
				___ui8 := j.Ui8
				___i := j.I
				___ui := j.Ui
				___d := j.D
				___l := j.L
`sender!some_numbers(`___i8` as Int8, `___ui8` as UInt8, `___i` as Integer, `___ui` as UInt16, `___d` as Double, `___l` as Int64)`
break

			case "some_strings" :
			j := FragmentTestMQTTMsgsMsgsome_strings{}
err := json.Unmarshal([]byte(` & payload & `), &j)
if (err != nil){
return false
}
				___c := j.C
				___str := j.Str
`sender!some_strings(`___c` as Char, `___str` as String)`
break

			case "some_bytes" :
			j := FragmentTestMQTTMsgsMsgsome_bytes{}
err := json.Unmarshal([]byte(` & payload & `), &j)
if (err != nil){
return false
}
				___b1 := j.B1
				___b2 := j.B2
`sender!some_bytes(`___b1` as Byte, `___b2` as Byte)`
break

			case "some_enum" :
			j := FragmentTestMQTTMsgsMsgsome_enum{}
err := json.Unmarshal([]byte(` & payload & `), &j)
if (err != nil){
return false
}
				___d0 := j.D0
				___d1 := j.D1
`sender!some_enum(`___d0` as DigitalState, `___d1` as DigitalState)`
break

			default: break;
		}`
		
		return true
	end
	
	
	statechart GoMQTTJSonSC init Running {
	
		internal event gomqtt?mqtt_connected action mqtt_subscribe()
		internal event m : gomqtt?mqtt_message action mqtt_parsemsg(m.topic, m.payload, m.size)

		

		state Running {}
		
	}
}

