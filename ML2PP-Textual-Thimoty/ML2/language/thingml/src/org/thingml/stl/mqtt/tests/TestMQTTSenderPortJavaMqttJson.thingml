
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "TestMQTTPorts.thingml"



thing TestMQTTSenderPort_JavaMqttJson_Impl includes TestMQTTSenderPort, MQTTAdapterMsgs 
@java_import `import net.sf.json.*;`
@maven_dep `		
       <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>2.4</version>
            <classifier>jdk15</classifier>
        </dependency>`
{
	
	required port javamqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "sender"
	
	
	function subscribe_for_message(msg_name : String) do
		`String topic = `&mqtt_topic_name&` + "/" + `&msg_name&`;`
		javamqtt!mqtt_subscribe(`topic`)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		`String topic = `&mqtt_topic_name&` + "/" + `&msg_name&`;`
		javamqtt!mqtt_publish(`topic`, payload, size)
	end
	
	
	function mqtt_subscribe() do
		subscribe_for_message("no_parameters")
		subscribe_for_message("some_numbers")
		subscribe_for_message("some_strings")
		subscribe_for_message("some_bytes")
		subscribe_for_message("some_enum")
		
	end
	
	function mqtt_parsemsg(topic : String, payload : Buffer, len : UInt32) : Boolean do
		
		`try {`
		`JSONObject json = (JSONObject) JSONSerializer.toJSON(new String(`&payload&`, java.nio.charset.StandardCharsets.UTF_8));`
		`boolean __valid_msg = false;`
		
		`String[] split = `&topic&`.split("/");`
		`if (split.length != 2)` return false // This is not a valid message
		
		var portname : String = `split[0]`
		var msgname : String = `split[1]`
		
		if (`!split[0].equals(`&mqtt_topic_name&`)`) return false // This message is for another port
		
		`switch (`&msgname&`) {  

			case "no_parameters" : 
				__valid_msg = true;
				if(__valid_msg)`sender!no_parameters()`
				else {
					`error "JSON ERROR: error parsing message no_parameters, message has been dropped."`
				}break;

			case "some_numbers" : 
				__valid_msg = true;
				int ___i8 = 0;
				if (json.has("i8")) ___i8= (int)json.getInt("i8");
				else {
					`error "JSON ERROR: parsing message some_numbers, missing parameter i8\n"`
					__valid_msg = false;
				}
				int ___ui8 = 0;
				if (json.has("ui8")) ___ui8= (int)json.getInt("ui8");
				else {
					`error "JSON ERROR: parsing message some_numbers, missing parameter ui8\n"`
					__valid_msg = false;
				}
				int ___i = 0;
				if (json.has("i")) ___i= (int)json.getInt("i");
				else {
					`error "JSON ERROR: parsing message some_numbers, missing parameter i\n"`
					__valid_msg = false;
				}
				int ___ui = 0;
				if (json.has("ui")) ___ui= (int)json.getInt("ui");
				else {
					`error "JSON ERROR: parsing message some_numbers, missing parameter ui\n"`
					__valid_msg = false;
				}
				double ___d = 0;
				if (json.has("d")) ___d= (double)json.getDouble("d");
				else {
					`error "JSON ERROR: parsing message some_numbers, missing parameter d\n"`
					__valid_msg = false;
				}
				long ___l = 0;
				if (json.has("l")) ___l= (long)json.getLong("l");
				else {
					`error "JSON ERROR: parsing message some_numbers, missing parameter l\n"`
					__valid_msg = false;
				}
				if(__valid_msg)`sender!some_numbers(`___i8`, `___ui8`, `___i`, `___ui`, `___d`, `___l`)`
				else {
					`error "JSON ERROR: error parsing message some_numbers, message has been dropped."`
				}break;

			case "some_strings" : 
				__valid_msg = true;
				byte ___c = 0;
				if (json.has("c")) ___c= (byte)json.getInt("c");
				else {
					`error "JSON ERROR: parsing message some_strings, missing parameter c\n"`
					__valid_msg = false;
				}
				String ___str = null;
				if (json.has("str")) ___str= (String)json.getString("str");
				else {
					`error "JSON ERROR: parsing message some_strings, missing parameter str\n"`
					__valid_msg = false;
				}
				if(__valid_msg)`sender!some_strings(`___c`, `___str`)`
				else {
					`error "JSON ERROR: error parsing message some_strings, message has been dropped."`
				}break;

			case "some_bytes" : 
				__valid_msg = true;
				byte ___b1 = 0;
				if (json.has("b1")) ___b1= (byte)json.getInt("b1");
				else {
					`error "JSON ERROR: parsing message some_bytes, missing parameter b1\n"`
					__valid_msg = false;
				}
				byte ___b2 = 0;
				if (json.has("b2")) ___b2= (byte)json.getInt("b2");
				else {
					`error "JSON ERROR: parsing message some_bytes, missing parameter b2\n"`
					__valid_msg = false;
				}
				if(__valid_msg)`sender!some_bytes(`___b1`, `___b2`)`
				else {
					`error "JSON ERROR: error parsing message some_bytes, message has been dropped."`
				}break;

			case "some_enum" : 
				__valid_msg = true;
				byte ___d0 = 0;
				if (json.has("d0")) ___d0= (byte)json.getInt("d0");
				else {
					`error "JSON ERROR: parsing message some_enum, missing parameter d0\n"`
					__valid_msg = false;
				}
				byte ___d1 = 0;
				if (json.has("d1")) ___d1= (byte)json.getInt("d1");
				else {
					`error "JSON ERROR: parsing message some_enum, missing parameter d1\n"`
					__valid_msg = false;
				}
				if(__valid_msg)`sender!some_enum(`___d0`, `___d1`)`
				else {
					`error "JSON ERROR: error parsing message some_enum, message has been dropped."`
				}break;

			default: break;
		}`

		return `__valid_msg`
		`} catch(Throwable t) {
			//t.printStackTrace();
			`error "Unable to parse message invalid message from topic ", topic, ". Payload: ", `new String(`&payload&`, java.nio.charset.StandardCharsets.UTF_8)` ," Message Dropped.\n"`
		}`
		return false
	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event javamqtt?mqtt_connected action mqtt_subscribe()
		internal event m : javamqtt?mqtt_message action mqtt_parsemsg(m.topic, m.payload, m.size)



		state Running {}
		
	}
}

