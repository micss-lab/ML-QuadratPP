/*
 * generated by Xtext 2.10.0
 */
package org.thingml.xtext.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.thingml.xtext.constraints.ThingMLHelpers
import org.thingml.xtext.thingML.Configuration
import org.thingml.xtext.thingML.Connector
import org.thingml.xtext.thingML.ExternalConnector
import org.thingml.xtext.thingML.RequiredPort
import org.thingml.xtext.thingML.Thing
import org.thingml.xtext.thingML.ThingMLFactory
import org.eclipse.emf.ecore.util.EcoreUtil
import org.thingml.xtext.thingML.ActionBlock
import org.thingml.xtext.thingML.StateContainer

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class ThingMLQuickfixProvider extends DefaultQuickfixProvider
 {

	@Fix("state-sink")
	def makeStateFinal(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Make state final",
			"Change state "+issue.data.get(0)+" to a final state",
			"" // Image
		)[ context | 
			context.xtextDocument.replace(issue.offset, 0, "final ")
		]
	}
	
	@Fix("type-cast")
	def cast(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Cast to " + issue.data.get(0),
			"Cast this expression to " + issue.data.get(0),
			"" // Image
		)[ context | 
			context.xtextDocument.replace(issue.offset + issue.length, 0, " as " + issue.data.get(0))
		]
	}
	
	@Fix("required-ports-not-connected")
	def makeOptional(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Make port " + issue.data.get(0) + " optional",
			"Make port " + issue.data.get(0) + " optional",
			"" // Image
		)[ obj, context | 
			if (obj instanceof Configuration) {
				val cfg = obj as Configuration
				val iName = issue.data.get(0).split("/").get(0)
				val i = cfg.instances.findFirst[i | i.name == iName]
				val pName = issue.data.get(0).split("/").get(1) //FIXME: for some reasons, issue.data.get(1) did not work...								
				val p = ThingMLHelpers.allPorts(i.type).findFirst[p | p instanceof RequiredPort && !(p as RequiredPort).optional && p.name == pName] as RequiredPort
				p.optional = true
			}
		]
	}
	
	@Fix("fragment-instanciation")
	def makeConcrete(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Make thing " + issue.data.get(0) + " concrete",
			"Make thing " + issue.data.get(0) + " concrete",
			"" // Image
		)[ obj, context | 
			if (obj instanceof Configuration) {
				val cfg = obj as Configuration
				val iName = issue.data.get(0)
				val i = cfg.instances.findFirst[i | i.name == iName]
				i.type.fragment = false				
			}
		]
	}
	
	@Fix("fragment-instanciation")
	def removeInstance(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Remove instance " + issue.data.get(0),
			"Remove instance " + issue.data.get(0),
			"" // Image
		)[ obj, context | 
			if (obj instanceof Configuration) {
				val cfg = obj as Configuration
				val iName = issue.data.get(0)
				val i = cfg.instances.findFirst[i | i.name == iName]
				val toBeRemoved = cfg.connectors.filter[ c |
					if (c instanceof ExternalConnector) {
						val ec = c as ExternalConnector
						return ec.inst == i
					} else {
						val conn = c as Connector
						return conn.cli == i || conn.srv == i
					}
				]
				cfg.connectors.removeAll(toBeRemoved)
				cfg.instances.remove(i)
			}
		]
	}	
	
	@Fix("unreachable-code")
	def removeUnreachableCode(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Remove unreachable code",
			"Remove unreachable code",
			"" // Image
		)[ obj, context |
			if (obj instanceof ActionBlock) {
				val block = obj as ActionBlock
				val index = Integer.parseInt(issue.data.get(0))
				while(block.actions.size > index + 1) {
					block.actions.remove(index + 1)	
				}							
			}
		]
	}
	
	@Fix("state-unreachable")
	def removeState(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Remove state " + issue.data.get(0),
			"Remove state " + issue.data.get(0),
			"" // Image
		)[ obj, context |
			if (obj instanceof StateContainer) {
				val sc = obj as StateContainer
				val sName = issue.data.get(0)
				val s = sc.substate.findFirst[st | st.name == sName]
				sc.substate.remove(s)
			}			
		]		
	}
	
	@Fix("function-never-called")
	def removeFunction(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Remove function " + issue.data.get(0),
			"Remove function " + issue.data.get(0),
			"" // Image
		)[ obj, context |
			if (obj instanceof Thing) {
				val thing = obj as Thing
				val fName = issue.data.get(0)
				val f = thing.functions.findFirst[fun | fun.name == fName]
				thing.functions.remove(f)
			}			
		]		
	}
	
	@Fix("abstract-function-fragment")
	def makeThingFragment(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Make thing a fragment",
			"Make thing a fragment",
			"" // Image
		)[ obj, context |
			if (obj instanceof Thing) {
				val thing = obj as Thing
				thing.fragment = true
			}
		]		
	}
	
	@Fix("abstract-function-fragment")
	def makeFunctionConcrete(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Make function " + (if (issue.data!==null) issue.data.get(0) else "") + " concrete", //FIXME: for some reasons, issue.data seems to be sometimes null...
			"Make function " + (if (issue.data!==null) issue.data.get(0) else "") + " concrete", //FIXME: for some reasons, issue.data seems to be sometimes null...
			"" // Image
		)[ obj, context |
			if (obj instanceof Thing) {
				val thing = obj as Thing
				val fName = issue.data.get(0)				
				val f = thing.functions.findFirst[ f | f.name == fName && f.abstract]
				f.abstract = false
				val block = ThingMLFactory.eINSTANCE.createActionBlock
				f.body = block
			}
		]		
	}
	
	@Fix("function-not-implemented")
	def implementFunction(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Implement function " + if (issue.data!==null) issue.data.get(0) else "", //FIXME: for some reasons, issue.data seems to be sometimes null...
			"Implement function " + if (issue.data!==null) issue.data.get(0) else "", //FIXME: for some reasons, issue.data seems to be sometimes null...
			"" // Image
		)[ obj, context | 
			if (issue.data !== null && obj instanceof Thing) {
				val thing = obj as Thing
				val fName = issue.data.get(0)
				val abs = ThingMLHelpers.allFunctions(thing).findFirst[ f | f.name == fName && f.abstract]
				
				val func = ThingMLFactory.eINSTANCE.createFunction
				func.name = abs.name
				func.abstract = false
				if (abs.typeRef !== null) {
					val typeRef = ThingMLFactory.eINSTANCE.createTypeRef
					typeRef.cardinality = EcoreUtil.copy(abs.typeRef.cardinality)
					typeRef.isArray = abs.typeRef.isArray
					typeRef.type = abs.typeRef.type
					func.typeRef = typeRef
				}
				val block = ThingMLFactory.eINSTANCE.createActionBlock
				func.body = block
				abs.parameters.forEach[ p | 
					val param = ThingMLFactory.eINSTANCE.createParameter
					param.name = p.name
					val typeRef = ThingMLFactory.eINSTANCE.createTypeRef
					typeRef.cardinality = EcoreUtil.copy(p.typeRef.cardinality)
					typeRef.isArray = p.typeRef.isArray
					typeRef.type = p.typeRef.type
					param.typeRef = typeRef
					func.parameters.add(param)
				]
				thing.functions.add(func)
			}
		]
	}	
}
