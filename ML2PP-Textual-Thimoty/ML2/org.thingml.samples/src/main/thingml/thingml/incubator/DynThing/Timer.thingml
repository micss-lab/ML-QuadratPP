/**
Unlike the print statement, ThingML does not provide any timing facilities directly in the language.
However, timers are usually important in your logic. We define below how to wrap timers for the different platforms.
*/

datatype Integer<2>	
	@c_type "int"
	@c_byte_size "2"
	@java_type "short"
	@java_primitive "true"
	@js_type "short";

/**
First, declare the messages that make sense for the timer:
- timer start
- timer cancel
- timer timeout
*/

thing fragment TimerMsgs {
	// Start the Timer
	message timer_start(delay : Integer);
	// Cancel the Timer
	message timer_cancel();
	// Notification that the timer has expired
	message timer_timeout();
}

/**
Second, organize your messages into a port. The timer can receive a timer_start and a timer_cancel,
and will eventually send a timer_timeout
*/
thing fragment Timer includes TimerMsgs
{
	provided port timer
    {
		sends timer_timeout
		receives timer_start, timer_cancel
	}
}

/**
A typical client for the timer will have a mirror port, able to send timer_start and timer_cancel,
and able to receive a timer_timeout
*/
thing fragment TimerClient includes TimerMsgs
{
	required port timer
    {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
    
}

thing fragment ClockProcessorMsg {
	message tick(time : Integer);
	message processor_instanciated(id : Integer);
	message processor_destroyed(id : Integer);
}


thing Clock includes TimerClient, ClockProcessorMsg {

	provided port processor {
		sends tick
		receives processor_instanciated, processor_destroyed
	}

	readonly property period : Integer = 1000
	property time : Integer = 0
	
	statechart behavior init Init {
	
		state Init {
			on entry do
				timer!timer_start(period)
			end
			
			transition -> Init event timer?timer_timeout 
			action do
				processor!tick(time)
				time = time + 1
			end
		
			internal event e:processor?processor_instanciated action do
				print "Processor instantiated ID=" + e.id + "\n"
			end
			
			internal event e:processor?processor_destroyed action do
				print "Processor *destroyed*  ID=" + e.id + "\n"
			end
		
		}
	}
}

thing Processor includes ClockProcessorMsg {

	property ID : Integer = 0

	required port clock {
		receives tick
		sends processor_instanciated, processor_destroyed
	}
	
	
	statechart behavior init Ready {
	
		state Ready {
			// This is a fork transition. In the parent, the target state is the same as source but exited and re-entered. In the child the target state is the specified one.
			// Instead of the annotation, we could replace the "transition" keyword by a "fork" keyword
			transition -> Process1 @fork "true" 
			event clock?tick // Normal event triger
			action ID = ID + 1 // Action is executed in the parent before clonning
		}
		
		state Process1 {
			on entry clock!processor_instanciated(ID)
			transition -> Process2 event e:clock?tick
			action print "Processor " + ID + " processing tick " + e.time + "\n"
		}
		
		state Process2 {
			transition -> Process3 event e:clock?tick
			action print "Processor " + ID + " processing tick " + e.time + "\n"
		}
		
		state Process3 {
			transition -> Final event e:clock?tick
			action print "Processor " + ID + " processing tick " + e.time + "\n"
		}
		
		state Final 
		@FinalState "true" // this will cause the compoennt to be stopped and destroyed whenever this state is entered.
		{
			on entry clock!processor_destroyed(ID)
		}
		
		
	}
	
	
}

