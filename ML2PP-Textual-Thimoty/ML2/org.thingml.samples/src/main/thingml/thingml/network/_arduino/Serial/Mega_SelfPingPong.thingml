datatype UInt16<2> @c_type "uint16_t";

thing fragment PingPongMsgs {
	message ping(u : UInt16, u2 : UInt16) @code "16";
	message pong();
}

thing PingServer includes PingPongMsgs {

	provided port ping_service {
		sends pong
		receives ping
	}

	statechart PongServerMachine init Active {

        on entry print "Ping Server Started!\n"

		state Active {
			
			internal event e : ping_service?ping
			action do
				print "ping: "
				print e.u
				print ", "
				print e.u2
				print "\n"
				ping_service!pong()
			end
			
		}
	}
}

thing PingClient includes PingPongMsgs {

	required port ping_service {
		receives pong
		sends ping
	}
	
	statechart PingClientMachine init Ping {
	
	on entry print "Ping Client Started!\n"
	
		state Ping {
			
			on entry do
				print "Send Ping..." 
				ping_service!ping(257, 258)
			end
				
			
			transition PONG -> Pong 
			event ping_service?pong
			
		}
		
		state Pong {
			on entry print "Got pong!\n"
			
			transition -> Stop
			
		}
		
		state Stop {
			on entry print "Bye.\n"
		}
		
	}
	
}

protocol Serial1
@serializer "Binary"
;
protocol Serial2
@serializer "Binary"
;

configuration PingPongCfg 
@arduino_stdout "Serial"
{

	instance client: PingClient
	instance server: PingServer

	connector client.ping_service over Serial2
	connector server.ping_service over Serial1

}
