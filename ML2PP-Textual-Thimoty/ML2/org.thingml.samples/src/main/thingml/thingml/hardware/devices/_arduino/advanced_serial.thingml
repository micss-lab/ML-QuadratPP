import "../../arduino/_arduino/arduino.thingml"
import "../../../core/_arduino/comm.thingml"

thing fragment AdvancedSerialMsgs includes InputByteStreamMsgs, OutputByteStreamMsgs, FormatedOutputStreamMsgs 
{
	message receive_value (v : Int16);
    message value_mode ();
}

thing fragment IsDigitMsgs 
{
    message char (c : Byte);
	message is_digit (digit : Boolean, c : Byte);
}

thing fragment IsDigit includes IsDigitMsgs
{
	provided port TestDigit 
    {
		receives char
		sends is_digit
	}
	
	statechart IsDigitImpl init Run 
    {
		state Run 
        {
			internal event m : TestDigit?char
			action do
				if (47 < m.c and m.c < 58) TestDigit!is_digit (true, m.c)
				if (m.c < 48 or m.c > 57) TestDigit!is_digit (false, m.c)
				end
		}
	}
}

thing AdvancedSerial includes IsDigitMsgs, AdvancedSerialMsgs, ArduinoMsgs, ThingMLScheduler
{
    readonly property buffer_size : UInt8 = 20 // Not supported yet.
	//property buffer : String = '(char *) malloc (' & bufferSize & '* sizeof (char))'
    property buffer : String = '(char *) malloc (20 * sizeof (char))' // Temporary solution.
    property index : UInt8 = 0
    
	required port Serial 
    @sync_send "true" // Do not queue messages to make sure interrupts are executed right away.
    {
        receives receive_byte
        sends write_byte, print_message, print_value
	}
	
	required port TestDigit 
    {
		sends char
		receives is_digit
	}
	
	provided port AdvancedSerial 
     {
		sends receive_byte, receive_value
        receives write_byte, print_message, print_value, value_mode
	}
    
    required port Polling
    {
        receives poll
    }

    statechart AdvancedSerialImpl init Running 
    {        
        state Running 
        {    
            //* Redirecting print actions to basic serial device.
            internal event m : AdvancedSerial?write_byte
            action Serial!write_byte (m.b)
            
            internal event m : AdvancedSerial?print_message
            action Serial!print_message (m.msg)
            
            internal event m : AdvancedSerial?print_value
            action Serial!print_value (m.v)
            //*
            
        	internal event m : Serial?receive_byte
            guard not (m.b == '\'$\'')
            action AdvancedSerial!receive_byte(m.b)
                
            transition reading_number -> Receiving
            event m : Serial?receive_byte
            guard m.b == '\'$\''      
            action Serial!print_message("Reading a Number\n") // Debug
            
            transition reading_number -> Receiving
            event AdvancedSerial?value_mode                           
        }
        
        state Receiving
        { 
        	// Send the byte to check if it's a digit like supposed.
        	transition -> Buffering 
            event m : Serial?receive_byte
            action TestDigit!char (m.b)	
        }
        
        state Buffering
        {
            transition -> Receiving 
            event m : TestDigit?is_digit
            guard m.digit
            action do
            	''& buffer &'['& index & '] = '& m.c &';'
            	index = index + 1
            	end
            
            transition -> End 
            event m : TestDigit?is_digit
            guard not m.digit
            action ''& buffer &'['& index & '] = \'\0\';'
        }
        
        state End
        {
            on exit index = 0
            
            transition -> Running
        	event Polling?poll
        	action AdvancedSerial!receive_value ('atoi ('& buffer &')')
        }
    }
}

configuration fragment AdvancedSerial 
{
	instance serial : SerialArduino
    instance testdigit : IsDigit
    
    instance advanced_serial : AdvancedSerial
	connector advanced_serial.Serial => serial.IOStream
    connector advanced_serial.Serial => serial.Serial
    connector advanced_serial.TestDigit => testdigit.TestDigit 
}