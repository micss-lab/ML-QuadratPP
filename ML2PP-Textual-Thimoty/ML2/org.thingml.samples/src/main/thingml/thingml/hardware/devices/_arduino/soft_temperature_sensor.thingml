import "../../arduino/_arduino/arduino.thingml"
import "../../bricks/_arduino/temperature_sensor.thingml"

thing fragment SoftTemperatureSensorMsgs 
{	
	message temperature (t : Int16, min : Int16, max : Int16);
	message get_temperature ();
	message reset_min_max ();
	message subscribe_temperature (interval : UInt16);
	message unsubscribe_temperature ();
	message activate_alarms (low : Int16, high : Int16);
	message high_temp_alarm (t : Int16);
	message low_temp_alarm (t : Int16);
	message no_alarm ();
	message deactivate_alarms ();
}

thing SoftTemperatureSensor includes SoftTemperatureSensorMsgs, TemperatureSensorMsgs, TimerMsgs
{	
    readonly property delay : UInt16 = 20
    
	property temp : Int16
	property min : Int16 = 1000
	property max : Int16 = - 1000
	property interval : Int16
	property min_alarm : Int16
	property max_alarm : Int16
	
	provided port SoftTemperatureSensor 
	{
	   	receives get_temperature, reset_min_max, subscribe_temperature, unsubscribe_temperature
		sends temperature
	}

	provided port SoftTemperatureSensorAlarms 
    {
		receives activate_alarms, deactivate_alarms
		sends low_temp_alarm, high_temp_alarm, no_alarm
	}
	
	required port TemperatureSensor
    {
        sends read_temperature
		receives temperature_value    
    }
	
	required port SubTimer 
    {
	   	sends timer_start, timer_cancel
		receives timer_timeout
	}

	required port AlTimer 
    {
	   	sends timer_start, timer_cancel
		receives timer_timeout
	}
	
	statechart SoftTemperatureSensorImpl init Running 
    {        
        state Running
        {	
            internal event SoftTemperatureSensor?get_temperature
            action SoftTemperatureSensor!temperature (temp, min, max)
			
            internal event SoftTemperatureSensor?reset_min_max
            action do
        		min = temp
        		max = temp
            end
			
        	internal event m : TemperatureSensor?temperature_value
    		action do
    			temp = m.val
    			if (temp < min) min = temp
    			if (temp > max) max = temp
    		end
        }
        
        region Subscription init NoSubscription 
        {	
        	state NoSubscription 
            {
        		transition -> HasSubscription
        		event m : SoftTemperatureSensor?subscribe_temperature
        		action interval = m.interval
        	}
        	
        	state HasSubscription 
            {
        	   	on entry SubTimer!timer_start (interval)
                
                transition refresh -> HasSubscription
                event SubTimer?timer_timeout
                action SoftTemperatureSensor!temperature (temp, min, max)
                
                transition unsubscribe -> NoSubscription
				event SoftTemperatureSensor?unsubscribe_temperature
				action SubTimer!timer_cancel ()
        	}
		}
        	
		region Alarm init Disactivated 
		{
        	state Disactivated 
			{
        		transition -> Activated
        		event m : SoftTemperatureSensorAlarms?activate_alarms
        		action do
        			min_alarm = m.low
        			max_alarm = m.high
        		end
        	}
        	
        	composite state Activated  init NoAlarm 
			{
				on entry AlTimer!timer_start (delay)
				
				transition -> Disactivated
        		event SoftTemperatureSensorAlarms?deactivate_alarms 
                action AlTimer!timer_cancel ()       		

                internal event AlTimer?timer_timeout
                action AlTimer!timer_start (delay)
                    
        		state NoAlarm 
				{
					on entry SoftTemperatureSensorAlarms!no_alarm ()

        			transition -> HighTempAlarm
        			event AlTimer?timer_timeout
        			guard temp > max_alarm
        			action AlTimer!timer_start (delay)

        			transition -> LowTempAlarm
        			event AlTimer?timer_timeout
        			guard temp < min_alarm
					action AlTimer!timer_start (delay)
        		}
        		
        		state HighTempAlarm 
				{	
        			on entry SoftTemperatureSensorAlarms!high_temp_alarm (temp)
        			
        			transition -> NoAlarm
        			event AlTimer?timer_timeout
        			guard temp < max_alarm
					action AlTimer!timer_start (delay)
        		}
        		
        		state LowTempAlarm 
				{
        			on entry SoftTemperatureSensorAlarms!low_temp_alarm (temp)
        			
        			transition -> NoAlarm
        			event AlTimer?timer_timeout
        			guard temp > min_alarm
					action AlTimer!timer_start (delay)
        		}
        	}
        }
    }
}

configuration fragment SoftTemperatureSensorArduino
{
	group temperature_sensor : TemperatureSensorArduino
	
	instance sub_timer : TimerArduino
	instance al_timer : TimerArduino

	instance soft_temperature_sensor : SoftTemperatureSensor
	connector soft_temperature_sensor.SubTimer => sub_timer.timer
	connector soft_temperature_sensor.AlTimer => al_timer.timer
	connector soft_temperature_sensor.TemperatureSensor => temperature_sensor.temperature_sensor.TemperatureSensor
}