import "advanced_serial.thingml"
import "../../bricks/_arduino/rotation_sensor.thingml"
import "../../bricks/lcd_screen.thingml"

thing fragment ValueChooserMsgs 
{
    message run (name : String, low : Int16, high : Int16);
    message get_value ();
    message choosed_value (val : Int16);
}

thing SerialValueChooser includes ValueChooserMsgs, AdvancedSerialMsgs
{
    provided port ValueChooser
    {
        receives run
        sends choosed_value
    }
    
    required port AdvSerial
     @sync_send "true" // Do not queue messages to make sure interrupts are executed right away.
    {
        receives receive_value
        sends print_message, value_mode, print_value
    }
    
    statechart SerialValueChooserImpl init Idle
    {
        state Idle
        {
            transition read -> Reading
            event m : ValueChooser?run
            action AdvSerial!print_message (m.name)
        }
        
        state Reading
        {
            on entry AdvSerial!value_mode ()
            
            transition read -> Idle
            event m : AdvSerial?receive_value
            action ValueChooser!choosed_value (m.v)
        }
    }
}

thing RotationValueChooser includes ValueChooserMsgs, RotationSensorMsgs, LcdScreenMsgs
{
    property choosing_name : String
    property choosing_value : Int16
    property low : Int16
    property high : Int16
    
    provided port ValueChooser
    {
        sends choosed_value
        receives run, get_value
    }
    
    required port LcdScreen
    {
        sends clear, print_string, print_value, set_cursor
    }
    
    required port RotSensor
    {
        receives rotation_value
    }
    
    statechart RotationValueChooserImpl init Idle
    {
        state Idle
        {
            transition run -> Running
            event m : ValueChooser?run
            action do
                choosing_name = m.name
                low = m.low
                high = m.high
                end
        }
        
        state Running
        {
            internal refresh event m : RotSensor?rotation_value
            action choosing_value = 'map ('& m.val &', '& low &', '& high &', 0, 1023)'
             
            transition over -> Idle
            event ValueChooser?get_value
            action ValueChooser!choosed_value (choosing_value)     
        }
        
        region display init Running
        {
            state Running
            {
                on entry do
                    LcdScreen!clear ()
                    LcdScreen!print_string (choosing_name)
                    end 
                
                internal event RotSensor?rotation_value
                action do
                    LcdScreen!set_cursor (0, 1)
                    LcdScreen!print_value (choosing_value)
                    LcdScreen!print_string ("     ")
                    end
            }
        }
    }    
}

configuration fragment SerialValueChooser
{
    group adv_serial : AdvancedSerial
    instance value_chooser : SerialValueChooser
    connector value_chooser.AdvSerial => adv_serial.advanced_serial.AdvancedSerial
}

configuration fragment RotationValueChooser
{
    group rot_sensor : RotationSensorArduino
    
    instance lcd_screen : LcdScreen
    
    instance value_chooser : RotationValueChooser
    connector value_chooser.LcdScreen => lcd_screen.LcdScreen
    connector value_chooser.RotSensor => rot_sensor.rotation_sensor.RotationSensor 
}