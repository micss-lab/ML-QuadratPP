//Required installation to run this example:
//1) Clone https://github.com/SINTEF-9012/TinyOpenZWaveApi
//2) Navigate to open-zwave/install
//3) Run: make && make install
//4) Navigate to TinyOpenZWaveApi
//5) Run: make && make install
//6) install the udev library, make sure that pthread is also installed

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "config.thingml"
import "controller.thingml"

object BinarySwitch
@c_type "BinarySwitch*";

thing fragment BinarySwitchMsg {
	message initialize();
	message turnon();
	message turnoff();
	message request();
	message reporterror(code : Integer);

	//internal messages
	message status(bsstate : Boolean);
	message ready();
	message nochange();
}

thing ZWaveBinarySwitch includes BinarySwitchMsg, ControllerMsg, Config
@c_header "
#include \"tinyozw/TinyZWaveFacade.h\"
#include \"tinyozw/devices/BinarySwitch.h\"
#include \"tinyozw/libs/Utility.h\"

using namespace TinyOpenZWaveApi;
"
 {
    property bsw : BinarySwitch
    property nodeId : Integer
	property cInstance : Integer
	property cIndex : Integer
    property attempts : Integer = 0
    property MAX_ATTEMPTS : Integer = 3
    property status : Boolean = false
 
 	provided port bswintsndport {
 		sends status, nochange, ready
 	}
 	
 	required port bswintrcvport {
 		receives status, nochange, ready
 	}
 	
 	provided port bswport {
 		sends status, ready, reporterror
 		receives turnon, turnoff, initialize, request
 	}
 	
 	required port ctrlport {
		sends controllerStatus
		receives controllerReady
	}
    
    function turned_on_callback()
    @c_prototype "void turned_on_callback(void *_instance, ...)"
    @c_instance_var_name "(ZWaveBinarySwitch_Instance *) _instance"
    do
        bswintsndport!status(true)
    end
    
    function turned_off_callback()
    @c_prototype "void turned_off_callback(void *_instance, ...)"
    @c_instance_var_name "(ZWaveBinarySwitch_Instance *) _instance"
    do
        bswintsndport!status(false)
    end
    
    function no_change_callback()
    @c_prototype "void no_change_callback(void *_instance, ...)"
    @c_instance_var_name "(ZWaveBinarySwitch_Instance *) _instance"
    do
        bswintsndport!nochange()
    end
    
    function init_callback()
    @c_prototype "void init_callback(void *_instance, ...)"
    @c_instance_var_name "(ZWaveBinarySwitch_Instance *) _instance"
    do
    	bswintsndport!ready()
    end
	
	function init_binaryswitch() do
        print "FibaroPlug: initializing ... \n"
        'ThingMLCallback* turned_on = new ThingMLCallback(turned_on_callback, _instance);'
        'ThingMLCallback* turned_off = new ThingMLCallback(turned_off_callback, _instance);'
        'ThingMLCallback* no_change = new ThingMLCallback(no_change_callback, _instance);'
        'ThingMLCallback* device_init = new ThingMLCallback(init_callback, _instance);'
        bsw = 'new BinarySwitch();'
        bsw = ''&bsw&'->BinarySwitch::Init(OpenZWaveFacade::GetController(' & pport & '), (uint8)' & nodeId & ',(uint8)' & cInstance & ', (uint8)'& cIndex &');'
        ''&bsw&'->setDeviceInitCallback(device_init);'
		''&bsw&'->setTurnedOnCallback(turned_on);'
		''&bsw&'->setTurnedOffCallback(turned_off);'
		''&bsw&'->setNoChangeCallback(no_change);'
	end
	
    function turn_on() do
         print "ZWaveBinarySwitch: turning on ... \n"
        ''&bsw&'->turnOn();'
    end

    function turn_off() do
        print "ZWaveBinarySwitch: turning off ... \n"
        ''&bsw&'->turnOff();'
    end
    
    function isOn() : Boolean do
    	return ''&bsw&'->isOn();'
    end
    
    statechart behavior init Start {
 
    	state Start {
    		on entry do
				print "ZwaveBinarySwitch: waiting for initialize command ...\n"
			end
    		transition->WaitingForController
    		event bswport?initialize
    	}
    	
    	state WaitingForController {
    		on entry do
    			print "ZwaveBinarySwitch: finding out whether a controller is initialized...\n"
    			ctrlport!controllerStatus()
    		end
    		
    		transition->WaitingForController
    		event e : ctrlport?controllerReady
    		guard e.status == false
    		
    		transition->Init
    		event e : ctrlport?controllerReady
    		guard e.status == true
    		action do
    			init_binaryswitch()
    		end
    	}
    	
    	state Init {
            
            transition -> Ready
            event bswintrcvport?ready
            action do
                status = isOn()
                bswport!ready()
            end
		}
				
		state Ready {
			on entry do
				print "ZwaveBinarySwitch: ready ...\n"
			end
			
			internal event e : bswintrcvport?status
			action do
				status = e.bsstate
				bswport!status(status)
			end
			
			internal event bswport?request
			action do
				status = isOn()
				bswport!status(status)
			end
			
			transition -> TurningOn
			event bswport?turnon
			guard status == false
			action attempts = 0
			
			internal event bswport?turnon
			guard status == true
			action do
				bswport!status(status)
			end
			
			transition -> TurningOff
			event bswport?turnoff
			guard status == true
			action attempts = 0
			
			internal event bswport?turnoff
			guard status == false
			action do
				bswport!status(status)
			end
		}
		
		state TurningOn {
			on entry do
				turn_on()
			end
			
			transition->Ready
			event e : bswintrcvport?status
			action do
				status = e.bsstate
				attempts = 0
			end
			
			transition->TurningOn
			event e : bswintrcvport?nochange
			guard attempts < MAX_ATTEMPTS
			action attempts = attempts + 1
			
			transition->Ready
			event e : bswintrcvport?nochange
			guard attempts == MAX_ATTEMPTS or attempts > MAX_ATTEMPTS
			action do
				attempts = 0
				print "ZwaveBinarySwitch : failed to switch on a binary switch...\n"
				bswport!reporterror(0)
			end
		}
		
		state TurningOff {
			on entry do
				turn_off()
			end
			
			transition->Ready
			event e : bswintrcvport?status
			action do
				status = e.bsstate
				attempts = 0
			end
			
			transition->TurningOff
			event e : bswintrcvport?nochange
			guard attempts < MAX_ATTEMPTS
			action attempts = attempts + 1
			
			transition->Ready
			event e : bswintrcvport?nochange
			guard attempts == MAX_ATTEMPTS or attempts > MAX_ATTEMPTS
			action do
				attempts = 0
				print "ZwaveBinarySwitch : failed to switch off a binary switch...\n"
				bswport!reporterror(0)
			end
		}

    }
}
