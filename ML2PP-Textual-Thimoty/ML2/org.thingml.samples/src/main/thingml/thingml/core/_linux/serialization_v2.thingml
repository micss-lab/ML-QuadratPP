import "serializer.thingml"


thing ThingSerializer includes ArraySerializerCPP, ArrayDeserializerCPP {
    
    provided port serialized @sync_send "true" {
    	sends receive_bytes
    	receives write_bytes
    }
    
    function forward() do
    	'printf("forward is called...\n");'
		index = DATA_POSITION
		readonly var code : Byte = buffer[CODE_POSITION]
		'printf("code is  %d...\n", ' & code & ');'
		if (code == 1) do
			var chars : Char[1024]
			var data : String = deserializeString(chars)
			'printf("data is received  \'%s\'...\n", ' & data & ');'
		end
	end

    statechart behavior init Convert {

        state Convert {
            on entry do
                print "converting...\n"
                ssetHeader(1, 5) //length of the data chunck + 1 byte to stor a string length
                serializeString("ping")
                send()
            end
            
            internal event e : serialized?write_bytes
            action do
				serialized!receive_bytes(e.b)
            end
            
            internal event e: in?receive_bytes
            action receive(e.b)
            
        }
    }
}

configuration SerializeDeserialize
  @output_folder "/home/tmp"
  @debug "true"
  @debug_fifo "true"
  @debug_message_send ".*"
  @debug_message_receive ".*"
{

	instance serializer : ThingSerializer
	
	connector serializer.out => serializer.serialized
	connector serializer.in => serializer.serialized
}