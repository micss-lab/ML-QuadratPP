
import "serializer.thingml"
import "../websocket.thingml"
import "zwave/binarysensor.thingml"
import "zwave/controller.thingml"
import "websocket/client.thingml"


thing fragment MovementSensorMsg {
	message movement(detected : Boolean);
	message movementStatus();
}

thing MovementSensor includes BinarySensorMsg, MovementSensorMsg {

	property isMovement : Boolean = false

	required port bsport {
		sends initilalize
    	receives status, ready
    }
    
    required port movement {
    	sends movement
    	receives movementStatus
    }
    
    statechart behavior init Init {
    	
    	state Init {
    		on entry do
    			bsport!initilalize()
    		end
    		
    		transition->Ready
    		event bsport?ready
    	}
    	
    	state Ready {
    	
    		internal event e : bsport?status
    		action do
    			if(e.dwstate == 0) do
    				isMovement = false
    			end
    			
    			if(e.dwstate > 0) do
    				isMovement = true
    			end
    			movement!movement(isMovement)
    		end
    		
    		internal event movement?movementStatus
    		action movement!movement(isMovement)
    	}
    }
}


thing fragment WSClientPort includes ArraySerializerCPP, ArrayDeserializerCPP, WebSocketMsgs, MovementSensorMsg, ArraySerializerCPP, ArrayDeserializerCPP {

	provided port serialized @sync_send "true" {
		sends receive_bytes
		receives write_bytes
	}
		
	provided port movement {
		sends movementStatus
		receives movement
	}
	
	required port lifecycle {
        sends start_client, stop_client, start_server
        receives onOpen, onClose
    }
    
    required port err {
        receives onError    
    }
    
    required port messaging {
        sends send
        receives onMessage
    }
    
    function forward() do
    	print "forward is called..."
		index = DATA_POSITION
		readonly var code : Byte = buffer[CODE_POSITION]
		//code 1: find out movement
		if (code == 1) do
			movement!movementStatus()
		end
	end
    
    statechart behavior init Init {
    	
    	state Init {
    		on entry do
    			lifecycle!start_client()
    		end
    		
    		transition->Ready
    		event lifecycle?onOpen
    		action do
    			print "WSClientPort : connection is esteblished, starting serving ...\n"
    			lifecycle!start_server()
    		end
    		
    		internal event e : err?onError
    		action do
    			print "WSClientPort : failed to run a client properly, cannot esteblish connection...\n"
    		end
    	}
    	
    	state Ready {
    	
    		internal event e :  messaging?onMessage
    		action do
				var bytes : Byte[256]
				stringToBytes(e.msg, bytes)
				serialized!receive_bytes(bytes)
    		end
    		
    		internal event e: in?receive_bytes
            action receive(e.b)
            
            internal event e : serialized?write_bytes
            action do
            	var mess : Char[1024] = ""
				bytesToString(e.b, mess)
				messaging!send(mess)
            end
            
            internal event e : movement?movement
            action do
            	// code 2 is a response code, 1 is request code for the movement status
            	if(e.detected) do
            		print "movement is detected, sending report...\n"
            		ssetHeader(2, 5) //length of the data chunck + 1 byte to stor a string length
                	serializeString("true")
            	end
            	if(not e.detected) do
            		print "movement is NOT detected, sending report...\n"
            		ssetHeader(2, 6)
            		serializeString("false")
            	end
            	send()
            end
    	}
    }

}

configuration ZWaveDevices 
  @output_folder "/home/tmp/"
  @debug "true"
  @debug_fifo "true"
  @debug_message_send ".*"
  @debug_message_receive ".*"
  @add_c_libraries "udev pthread websockets tinyws openzwave tinyozw"
{

	instance zwavebs : ZWaveBinarySensor
	connector zwavebs.bsportintrecv => zwavebs.bsportintsend
	set zwavebs.nodeId = 4
	set zwavebs.cInstance = 1
	set zwavebs.cIndex = 0
	
	instance zwavectrl : ZWaveController
	connector zwavectrl.ctrlrecvint => zwavectrl.ctrlsendint
	connector zwavebs.ctrlport => zwavectrl.ctrlport
	
	instance msensor : MovementSensor
	connector msensor.bsport => zwavebs.bsport
	
	instance wsclientport : WSClientPort
	connector msensor.movement => wsclientport.movement
	connector wsclientport.out => wsclientport.serialized
	connector wsclientport.in => wsclientport.serialized
	
	instance cppwsclient : CPPWSClient 
	set cppwsclient._port = "7681"
    set cppwsclient._host = "localhost"
    
    connector wsclientport.lifecycle => cppwsclient.lifecycle
    connector wsclientport.err => cppwsclient.err
    connector wsclientport.messaging => cppwsclient.messaging
}