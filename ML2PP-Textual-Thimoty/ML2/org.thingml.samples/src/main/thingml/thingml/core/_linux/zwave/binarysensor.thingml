//Required installation to run this example:
//1) Clone https://github.com/SINTEF-9012/TinyOpenZWaveApi
//2) Navigate to open-zwave/install
//3) Run: make && make install
//4) Navigate to TinyOpenZWaveApi
//5) Run: make && make install
//6) install the udev library, make sure that pthread is also installed

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "config.thingml"
import "controller.thingml"

object BinarySensor
@c_type "BinarySensor*";


thing fragment BinarySensorMsg {
	message initilalize();

	//internal messages
	message status(dwstate : Integer);
	message ready();
}

thing ZWaveBinarySensor includes BinarySensorMsg, ControllerMsg, Config 
@c_header "
#include <stdlib.h>
#include <cstdarg>
#include \"tinyozw/TinyZWaveFacade.h\"
#include \"tinyozw/devices/BinarySensor.h\"
#include \"tinyozw/libs/Utility.h\"

using namespace TinyOpenZWaveApi;
"
{
	property nodeId : Integer
	property cInstance : Integer
	property cIndex : Integer
    property bs : BinarySensor
    property bsstate : Integer
    
    provided port bsport {
    	sends status, ready
    	receives initilalize
    }
    
	//these are two internal ports shoud be bound together
	provided port bsportintsend {
		sends ready, status
	}
	
	required port bsportintrecv {
		receives ready, status
	}
	
	required port ctrlport {
		sends controllerStatus
		receives controllerReady
	}
	
    
   	function init_binarysensor_callback()
    @c_prototype "void init_binarysensor_callback(void *_instance, ...)"
    @c_instance_var_name "(ZWaveBinarySensor_Instance *) _instance"
    do
    	bsportintsend!ready()
    end
    
    function value_change_binarysensor_callback()
    @c_prototype "void value_change_binarysensor_callback(void *_instance, ...)"
    @c_instance_var_name "(ZWaveBinarySensor_Instance *) _instance"
    do
		'va_list arguments;'
        'va_start(arguments, _instance);'
        'int state = va_arg(arguments, int);'
    	'va_end(arguments);'
    	bsportintsend!status('state')
    end
	
	function init_binarysensor() do
        print "ZwaveBinarySensor: initializing ... \n"
        'ThingMLCallback* value_changed = new ThingMLCallback(value_change_binarysensor_callback, _instance);'
        'ThingMLCallback* device_init = new ThingMLCallback(init_binarysensor_callback, _instance);'
        bs = 'new BinarySensor();'
        bs = ''&bs&'->BinarySensor::Init(OpenZWaveFacade::GetController(' & pport & '), (uint8)' & nodeId & ',(uint8)' & cInstance & ', (uint8)'& cIndex &');'
        ''&bs&'->setDeviceInitCallback(device_init);'
		''&bs&'->setValueUpdatedCallback(value_changed);'
	end

	function getState() : Integer do
		return ''&bs&'->getCurrentValue()'
	end
    
   
    statechart behavior init Start {
 
    
    	state Start {
    		on entry do
				print "ZwaveBinarySensor: waiting for initialize command ...\n"
			end
    		transition->WaitingForController
    		event bsport?initilalize
    	}
    	
    	state WaitingForController {
    		on entry do
    			print "ZwaveBinarySensor: finding out whether a controller is initialized...\n"
    			ctrlport!controllerStatus()
    		end
    		
    		transition->WaitingForController
    		event e : ctrlport?controllerReady
    		guard e.status == false
    		
    		transition->Init
    		event e : ctrlport?controllerReady
    		guard e.status == true
    		action do
    			init_binarysensor()
    		end
    	}
    	
    	state Init {
            
            transition -> Ready
            event bsportintrecv?ready
            action do
                bsstate = getState()
                bsport!ready()
            end
		}
				
		state Ready {
			on entry do
				print "ZwaveBinarySensor: ready ...\n"
			end
			
			internal event e : bsportintrecv?status
			action do
				bsstate = getState()
				bsport!status(e.dwstate)
			end
		}

    }
}
