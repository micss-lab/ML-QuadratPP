import "./timer.thingml"

object GPIO;

thing fragment Edison 
@js_dep "mraa:^0.5.4"
{
    
}


thing fragment LedMsgs
{
	message led_on ();
	message led_off ();
	message led_toggle ();
}

thing fragment LedClient includes LedMsgs
{   
	required port Led @sync_send "true"
    {
		sends led_on, led_off, led_toggle
	}
}

thing fragment Led includes LedMsgs
{   
	provided port Led 
    {
		receives led_on, led_off, led_toggle
	}
}

thing LedEdison includes Edison, Led
{
    readonly property pinNumber : Integer = 13
    readonly property pin : GPIO @private "true" 
        
    statechart LedImpl init Init 
    {    
        
        state Init {
        on entry do
            print "" + 'mraa.getVersion()'
            pin = 'new mraa.Gpio(13);'//TODO: PIN number should be a param
            'console.log(' & pin & ');'
            '' & pin & '.dir(mraa.DIR_OUT);'
            '' & pin & '.write(0);'
            '' & pin & '.write(1);'
            '' & pin & '.write(0);'
            '' & pin & '.write(1);'
            '' & pin & '.write(0);'
            '' & pin & '.write(1);'
            '' & pin & '.write(0);'
            '' & pin & '.write(1);'
        end            
        
        transition -> LedOff
        }
    
        state LedOff 
        {
            on entry do
                if ('' & pin & ' != null') do
                    '' & pin & '.write(0);'
                end
                if ('' & pin & ' == null') do
                    error "Pin is null"
                end
            end
            transition switch_on -> LedOn 
            //event Led?led_on 
            event Led?led_toggle
            
        }
        
        state LedOn 
        {
            on entry do
                if ('' & pin & ' != null') do
                    '' & pin & '.write(1);'
                end
                if ('' & pin & ' == null') do
                    error "Pin is null"
                end
            end
            transition switch_off -> LedOff 
            //event Led?led_off 
            event Led?led_toggle
        }
    }   
}


thing Blink includes LedClient, TimerClient
{
    statechart BlinkImpl init Blinking 
    {    
        state Blinking 
        {    
            on entry timer!timer_start (1000)
            
            transition -> Blinking 
            event timer?timer_timeout 
            action Led!led_toggle () 
        }
    }
}

configuration LedEdison {
    instance led : LedEdison
    instance blink : Blink
    instance timer : TimerJS
    
    connector blink.Led => led.Led
    connector blink.timer => timer.timer    
}
