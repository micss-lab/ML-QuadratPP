//Required installation to run this example:
//1) Clone https://github.com/SINTEF-9012/TinyOpenZWaveApi
//2) Navigate to open-zwave/install
//3) Run: make && make install
//4) Navigate to TinyOpenZWaveApi
//5) Run: make && make install
//6) install the udev library, make sure that pthread is also installed

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "config.thingml"
import "controller.thingml"

object MultiLevel
@c_type "MultiLevel*";

thing fragment MultiLevelMsg {
	message initialize();
	message refresh();
	message cvalue(value : String);
	message request();
	
	message ready();
}

thing ZWaveMultiLevel includes MultiLevelMsg, ControllerMsg, Config 
@c_header "
#include \"tinyozw/TinyZWaveFacade.h\"
#include \"tinyozw/devices/MultiLevel.h\"
#include \"tinyozw/libs/Utility.h\"

using namespace TinyOpenZWaveApi;
"
{
	property nodeId : Integer
	property cInstance : Integer
	property cIndex : Integer
    property ml : MultiLevel
    property cvalue : String
    
    provided port mlport {
    	sends cvalue, ready, cvalue
    	receives initialize, refresh, request
    }
    
    required port ctrlport {
		sends controllerStatus
		receives controllerReady
	}
    
    provided port mlintsndport {
    	sends ready, cvalue
    }
    
    required port mlintrcvport {
    	receives ready, cvalue
    }

   	function init_multilevel_callback()
    @c_prototype "void init_multilevel_callback(void *_instance, ...)"
    @c_instance_var_name "(ZWaveMultiLevel_Instance *) _instance"
    do
    	mlintsndport!ready()
    end
    
    function value_change_multilevel_callback()
    @c_prototype "void value_change_multilevel_callback(void *_instance, ...)"
    @c_instance_var_name "(ZWaveMultiLevel_Instance *) _instance"
    do
		'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* cvalue = va_arg(arguments, chr*);'
    	'va_end(arguments);'
    	mlintsndport!cvalue('state')
    end
	
	function init_multilevel() do
        print "ZWaveMultiLevel: initializing ... \n"
        'ThingMLCallback* value_changed = new ThingMLCallback(value_change_multilevel_callback, _instance);'
        'ThingMLCallback* device_init = new ThingMLCallback(init_multilevel_callback, _instance);'
        ml = 'new MultiLevel();'
        ml = ''&ml&'->MultiLevel::Init(OpenZWaveFacade::GetController(' & pport & '), (uint8)' & nodeId & ',(uint8)' & cInstance & ', (uint8)'& cIndex &');'
        ''&ml&'->setDeviceInitCallback(device_init);'
		''&ml&'->setValueUpdatedCallback(value_changed);'
	end
	
	function refresh() do
		''&ml&'->refresh();'
	end

    statechart behavior init Start {
 
    	state Start {
    		on entry do
				print "ZWaveMultiLevel: waiting for initialize command ...\n"
			end
    		transition->WaitingForController
    		event mlport?initialize
    	}
    	
    	state WaitingForController {
    		on entry do
    			print "ZWaveMultiLevel: finding out whether a controller is initialized...\n"
    			ctrlport!controllerStatus()
    		end
    		
    		transition->WaitingForController
    		event e : ctrlport?controllerReady
    		guard e.status == false
    		
    		transition->Init
    		event e : ctrlport?controllerReady
    		guard e.status == true
    		action do
    			init_multilevel()
    		end
    	}
    	
    	state Init {
            
            transition -> Ready
            event mlintrcvport?ready
            action mlport!ready()
		}
				
		state Ready {
			on entry do
				print "ZWaveMultiLevel: ready ...\n"
			end
			
			internal event e : mlintrcvport?cvalue
			action do
				cvalue = e.value
				mlport!cvalue(e.value)
			end
			
			internal event e : mlport?request
			action mlport!cvalue(cvalue)
			
			internal event e : mlport?refresh
			action refresh()
		}
	}

}
