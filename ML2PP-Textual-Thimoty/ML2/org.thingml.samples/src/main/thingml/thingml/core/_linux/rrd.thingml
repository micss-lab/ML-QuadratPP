import "../rrd.thingml"
import "./timer.thingml"

thing RRDLinux includes RRD, TimerClient
@c_header "
#include <stdio.h>
#include <stdlib.h>"
@c_global "
char* exec(const char* command) {
    printf(\"Executing command: %s\\n\", command);
	FILE* fp;
	char* result = NULL;
	size_t len = 0;

	fflush(NULL);
	fp = popen(command, \"r\");
	if (fp == NULL) {
		printf(\"Cannot execute command: %s\\n\", command);
		return;
	}

	while(getline(&result, &len, fp) != -1) {
		fputs(result, stdout);
	}

	free(result);
	fflush(fp);
	if (pclose(fp) != 0) {
		perror(\"Cannot close stream.\\n\");
	}
	return result;
}
"
{

    set aggregators[0] = ""
    set aggregators[1] = ""
    set aggregators[2] = ""
    set aggregators[3] = ""

    function create() do
        print("create RRD DB... ")
        '
        char command[1024];
        sprintf(command, "rrdtool create %s.rrd --start %d --step %d DS:%s:%s:%d:%d:%d", ' & name & ', ' & start & ', ' & step & ', ' & name & ', ' & ds & ', ' & heartbeat & ', ' & min & ', ' & max & ');
        '
        
        var i : Integer = 0
        while(i < 4) do
            'sprintf(command, "%s %s", command, ' & aggregators[i] & ');'
            i = i + 1
        end
        
        '
        printf("Command: %s\n", command);
        system(command);
        '        
        print("done!\n")
    end
    
    function store() 
    @fork_linux_thread "true" do
        print("Storing into RRD DB... ")
        '
        char command[256];
        sprintf(command, "rrdtool update %s.rrd N:%d", ' & name & ', ' & last & ');
        system(command);
        '
        print("done!\n")
    end
	
	statechart ClockImpl init Update {
		
        on entry create()
		
        state Update {
            
            on entry timer!timer_start(step)
            
            internal event u : update?update
            action last = u.value
            
            transition -> Update
            event timer?timer_timeout
            action store()
        }
                
	}

}

thing RRDTestApp includes RRDTest, TimerClient {
    
    statechart behavior init Init {
        
        property i : Integer = 0
        
        state Init {
        
            on entry timer!timer_start(5)
            
            transition -> Init 
            event timer?timer_timeout
            action do
                print("New test value\n")
                if (i > 15)
                    i = 0
                update!update(i)
                i = i + 1
            end
                
        }    
        
    }
	
}

configuration LinuxRRDTest 
  @debug "false"
  @debug_fifo "true"
  @debug_message_send ".*"
  @debug_message_receive ".*"
{
    
    instance clock : ClockLinux
    
    instance rrd : RRDLinux
        set rrd.name = "test"
        set rrd.aggregators[0] = "RRA:AVERAGE:0.5:6:2"
        set rrd.step = 10
    instance rrd_timer : TimerLinux
    
    
    instance test : RRDTestApp
    instance test_timer : TimerLinux
    
    connector rrd_timer.clock => clock.signal
    connector test_timer.clock => clock.signal
    connector rrd.timer => rrd_timer.timer
    connector test.timer => test_timer.timer
    
    connector test.update => rrd.update
}