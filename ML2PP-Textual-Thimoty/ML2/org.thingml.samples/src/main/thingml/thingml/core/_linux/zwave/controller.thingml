//Required installation to run this example:
//1) Clone https://github.com/SINTEF-9012/TinyOpenZWaveApi
//2) Navigate to open-zwave/install
//3) Run: make && make install
//4) Navigate to TinyOpenZWaveApi
//5) Run: make && make install
//6) install the udev library, make sure that pthread is also installed

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "config.thingml"

thing fragment ControllerMsg {
	message controller_ready();
  	message node_quiried(nodeid : Integer);
  	message all_nodes_quiried();
  	message quite();
  	message controllerStatus();
  	message controllerReady(status : Boolean);
}

object TinyController
@c_type "TinyController*";


thing ZWaveController includes ControllerMsg, Config
@c_header "
#include <stdlib.h>
#include <cstdarg>
#include \"tinyozw/TinyZWaveFacade.h\"
#include \"tinyozw/devices/TinyController.h\"
#include \"tinyozw/libs/Utility.h\"

using namespace TinyOpenZWaveApi;
"
{

	property controller : TinyController
	property status : Boolean = false

    provided port ctrlport {
    	sends controllerReady
    	receives controllerStatus, quite
    }
    
    provided port ctrlsendint {
    	sends controller_ready, all_nodes_quiried, node_quiried
    }
    
    required port ctrlrecvint {
    	receives controller_ready, all_nodes_quiried, node_quiried 
    }
        
    function controller_ready_callback()
    	@c_prototype "void controller_ready_callback(void *_instance, ...)"
    	@c_instance_var_name "(ZWaveController_Instance *) _instance"
    	do
    		ctrlsendint!controller_ready()
    	end
    	
    function all_nodes_quiried_callback()
        @c_prototype "void all_nodes_quiried_callback(void *_instance, ...)"
    	@c_instance_var_name "(ZWaveController_Instance *) _instance"
    	do
    		ctrlsendint!all_nodes_quiried()
    	end
    
    function node_quiries_completed_callback()
     	@c_prototype "void node_quiries_completed_callback(void *_instance, ...)"
    	@c_instance_var_name "(ZWaveController_Instance *) _instance"
    	do
    		'va_list arguments;'
        	'va_start(arguments, _instance);'
        	'int nodeid = va_arg(arguments, int);'
    		'va_end(arguments);'
    		ctrlsendint!node_quiried('nodeid')
    	end
	
	function init_controller() do
		print "ZWaveNetwork: initializing ... \n"
		'ThingMLCallback* controller_ready = new ThingMLCallback(controller_ready_callback, _instance);'
		'ThingMLCallback* all_nodes_quiried = new ThingMLCallback(all_nodes_quiried_callback, _instance);'
		'ThingMLCallback* node_quiries_complete = new ThingMLCallback(node_quiries_completed_callback, _instance);'
		''& controller &' = OpenZWaveFacade::CreateController('& pport &');'
		''& controller &'->setControllerReadyCallback(controller_ready);'
		''& controller &'->setAllNodeQueriedCallback(all_nodes_quiried);'
		''& controller &'->setNodeQueriesCompleteCallback(node_quiries_complete);'
	end
	
	function start_controller() do
		print "ZWaveNetwork: starting ... \n"
		''& controller &'->start();'
	end
	
	function init_openzwave() do
		'OpenZWaveFacade::Init('& config &','& zwdir &','& domo_log &','& enableLog &','& enableZWLog &','& polltime &');'
	end
	
	function quite_openzwave() do
		'OpenZWaveFacade::Quite();'
	end
	
	statechart behavior init Start {
	
		state Start {
			on entry do
				print "Controller : waiting controller to initialize...\n"
				init_openzwave()
				init_controller()
				start_controller()
			end
			
			transition->Ready
			event ctrlrecvint?controller_ready
			action do
				status = true
			end
		}
		
		state Ready {
			on entry do
				print "Controller: controller is ready...\n"
				ctrlport!controllerReady(status)
			end
			
			transition->Quite
			event ctrlport?quite
			
			internal event ctrlport?controllerStatus
			action do
				ctrlport!controllerReady(status)
			end
		}
		
		state Quite {
			on entry do
				print "Controller: quiting ...\n"
				quite_openzwave()
			end
		}
	}
}
