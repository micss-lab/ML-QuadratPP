import "../test.thingml"
datatype double<8>
@c_type "double";

thing TestDumpLinux includes TestDump
@c_header "#include <stdio.h>
#include <sys/time.h>"
@c_global "FILE* testFile = NULL;
FILE* cpuFile = NULL;"
{
	function write(c : Char) do
        'if (testFile == NULL) {
            testFile = fopen("dump", "w");
        }
        if (testFile != NULL) {
            fprintf(testFile,"%c",c);
        }
	    printf("%c\n",c);'
	end

	statechart LinuxHarness init Testing {
		property transitionsCount : Long = 0
 	    property stateNumber: String = ""
        property time : LongLong = 0
		
		state Testing {

            internal event m : dump?testOut
            action do
                write(m.c)
            	transitionsCount=transitionsCount+1
            end

            internal event dump?perfTestOut
            action transitionsCount=transitionsCount+1
            
            transition -> Failed 
            event dump?testFailure
            
            transition -> End
            event dumpEnd?testEnd

            internal event m: dumpEnd?perfTestSize
            action do
                time = m.time
                transitionsCount=transitionsCount+1
            end
		}
		
		state Failed {
            on entry do
                print("*FAILURE*\n")
                'if (testFile != NULL) {
                    fclose(testFile);
                }
                if (cpuFile != NULL) {
                    fclose(cpuFile);
                }
                exit(-1);'
            end
		}
		
		state End {
			on entry do
'cpuFile = fopen("cputime", "w");
if (cpuFile != NULL) {
    fprintf(cpuFile,"%li\n",'&time&');
}
char cmd[80];
sprintf(cmd, "ps -p %d -o %ccpu > stats",getpid(),\'%\');
system(cmd);
sprintf(cmd, "ps -p %d -o %cmem >> stats",getpid(),\'%\');
system(cmd);'
'sprintf(cmd, "echo \"%d\" > transitionsCount",' & transitionsCount & ');'
'system(cmd);
sprintf(cmd, "echo \"%f\" > cputime",'&time&');'
'system(cmd);
if (testFile != NULL) {
    fclose(testFile);
}
if (cpuFile != NULL) {
    fclose(cpuFile);
}'
print("End of thingml processus\n")
'exit(0);'
			end
		}
	}
}
