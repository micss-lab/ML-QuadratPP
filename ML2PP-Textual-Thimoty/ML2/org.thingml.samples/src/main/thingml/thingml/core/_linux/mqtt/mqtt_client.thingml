//Required installation to run this example:
//0) paho mqtt (https://github.com/eclipse/paho.mqtt.c) and thingml paho mqtt adoptation(https://github.com/SINTEF-9012/thingml-paho.mqtt.c) are required to run this example
//1) follow paho instructions to install paho mqtt
//2) Clone https://github.com/SINTEF-9012/thingml-paho.mqtt.c
//3) Navigate to thingml-paho.mqtt.c
//4) Run: make && make install
//5) install the udev library, make sure that pthread is also installed

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "../../mqtt_client.thingml"



object MQTTAsync
@c_type "MQTTAsync";

object ThingMLMQTTContext
@c_type "ThingMLMQTTContext*";


thing MQTTClientPSM includes MQTTClientMsg
@c_header "
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

#include \"thingmlmqtt/ThingMLMQTT.h\"
#include \"MQTTAsync.h\"
"
{
	property client : MQTTAsync = 'NULL'
	property context : ThingMLMQTTContext = '(ThingMLMQTTContext*) malloc(sizeof(ThingMLMQTTContext))'
	property serverURI : CString
	property clientId : CString
	property qos : Integer
	
	provided port mqttport {
		receives connect, reconnect, disconnect
		sends subscribed, connected, unsubscribed, disconnected, published, connection_failed, connection_lost, subscribe_failed
	}
	
	provided port syncmqttport @sync_send "true" {
		receives subscribe, unsubscribe, publish
		sends message_received
	}
	

	
    function connection_callback()
    @c_prototype "void connection_callback(void *_instance, ...)"
    @c_instance_var_name "(struct MQTTClientPSM_Instance *) _instance"
    do
    	'printf("connection callback is called...\n");'
    	mqttport!connected()
    end
	
	function connection_fail_callback()
	@c_prototype "void connection_fail_callback(void *_instance, ...)"
    @c_instance_var_name "(struct MQTTClientPSM_Instance *) _instance"
	do
		'printf("connection fail callback is called...\n");'
		mqttport!connection_failed()
	end
	
	function connection_lost_callback()
	@c_prototype "void connection_lost_callback(void *_instance, ...)"
    @c_instance_var_name "(struct MQTTClientPSM_Instance *) _instance"
	do
		'char* reason;'
		'va_list valist;'
		'va_start(valist, _instance);'
		'reason = va_arg(valist, char*);'
		'va_end(valist);'
		'printf("connection lost callback is lost, reason %c...\n", *reason);'
		mqttport!connection_lost()
	end
	
	function message_arrived_callback()
	@c_prototype "void message_arrived_callback(void *_instance, ...)"
    @c_instance_var_name "(struct MQTTClientPSM_Instance *) _instance"
    do
    	'char* message;'
		'char* topic;'
		'va_list valist;'
		'va_start(valist, _instance);'
	
		'topic = va_arg(valist, char*);'
		'message = va_arg(valist, char*);'
	
		'va_end(valist);'
	
		'printf("message arrived callback is called: topic \'%s\' and payload \'%s\'\n", topic, message);'
		syncmqttport!message_received('topic', 'message')
		'free(message);'
		'free(topic);'
    end
    
    function subscribe_callback()
	@c_prototype "void subscribe_callback(void *_instance, ...)"
    @c_instance_var_name "(struct MQTTClientPSM_Instance *) _instance"    
    do
    	'printf("subscribe callback is called\n");'
    	mqttport!subscribed()
    end
    
    function subscribe_fail_callback()
	@c_prototype "void subscribe_fail_callback(void *_instance, ...)"
    @c_instance_var_name "(struct MQTTClientPSM_Instance *) _instance"    
    do
		'int reason;'
		'va_list valist;'
		'va_start(valist, _instance);'
	
		'reason = va_arg(valist, int);'
	
		'va_end(valist);'
		'printf("subscribe fail callback is called with the reason %d\n", reason);'
		mqttport!subscribe_failed()
    end

    function message_published_callback()
	@c_prototype "void message_published_callback(void *_instance, ...)"
    @c_instance_var_name "(struct MQTTClientPSM_Instance *) _instance"    
    do
    	'printf("message published callback is called with the reason\n");'
    	mqttport!published()
    end
    
    function create_and_connect_client()
    do
    	'MQTTAsync_destroy(&'& client &');'
    	'nullset_thingml_mqtt_context('& context &');'
    	'create_mqtt_client(&'& client &', '& serverURI &', '& clientId &', '& context &');'
    	''& context &'->thing_instance = _instance;'
    	''& context &'->fn_onconn_callback = connection_callback;'
		''& context &'->fn_connlost_callback = connection_lost_callback;'
		''& context &'->fn_onconnfail_callback = connection_fail_callback;'
		''& context &'->fn_onmsgrcv_callback = message_arrived_callback;'
		connect_client()
    end
    
    function connect_client()
    do
    	'connect_mqtt_client('& context &');'
    end
    
    function subscribe_topic(topic : CString)
    do
    	'printf("Subscribe to the topic \"%s\"...\n", topic);'

		''& context &'->fn_onsub_callback = subscribe_callback;'
		''& context &'->fn_onsubfail_callback = subscribe_fail_callback;'
		'subscribe_mqtt_client('& context &', '& topic &', '& qos &');'
    end
    
    function publish_message(topic : CString, msg : String)
    do
    	'printf("Publishing message \"%s\" on the topic \"%s\"...\n", '& msg &', '& topic &');'
    	''& context &'->fn_onsend_callback = message_published_callback;'
    	'publish_mqtt_client('& context &', '& topic & ','& msg &', '& qos &');'
    end
	
	statechart behavior init Initialize {
	
		state Initialize {
			on entry do
				create_and_connect_client()
			end
			
			internal event e : syncmqttport?subscribe
			action subscribe_topic(e.topic)
			
			internal event e : syncmqttport?publish
			action publish_message(e.topic, e.msg)
			
			transition->Finalize
			event mqttport?disconnect
			
		}
		
		state Finalize {
			on entry do
				'MQTTAsync_destroy(&'& client &');'
				'free('& context &');'
			end
			
			transition -> Initialize
			event mqttport?reconnect
		}
	}
}
