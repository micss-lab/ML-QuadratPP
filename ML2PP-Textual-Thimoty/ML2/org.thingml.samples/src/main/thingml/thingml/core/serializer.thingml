import "../datatypes.thingml"
import "./comm.thingml"

//Defines constants and methods to manage variable size packets (with maximum size defined by MAX_PACKET_SIZE)
/*
*  For all serializable datatype called D (D is the name of the ThingML datatype, not the underlying platform-specific datatype), define:
*  - lengthD() : Integer, which returns the size in bytes of the serialized type. This should be defined here to ensure the consistencies of all serializer.
*  - serializeD(d : D, bytes : Byte[MAX_PACKET_SIZE], startPosition : Integer), which puts the serialized datatype in the buffer, starting at bytes[startPosition]. This should be defined in a PSM thing that include this thing.
*  - deserializeD(bytes : Byte[MAX_PACKET_SIZE], startPosition : Integer) : D, which gets the datatype from its serialized form, starting from bytes[startPosition]. This should be defined in a PSM thing that include this thing.
*  The idea is inspired by the ByteBuffer provided by Java (http://download.oracle.com/javase/1.4.2/docs/api/java/nio/ByteBuffer.html), 
*  but this implementation aims at being as independent as possible to any specific platform, so that ThingML can seamlessly compile to different plaforms (Scala/Java, C, etc)
* 
*  ThingML comes along with serialize/deserialise functions for all the datatypes defined in the ThingML framework.
*  User defined datatypes that needs to be serialized should come along these functions.
*/
thing fragment PacketManager {
        //Define the length (in bytes) of all the datatypes
        //TODO: Do it for all the other datatypes provided by ThingML
    readonly property lengthInteger : Byte = 2    
    readonly property lengthString : Byte = 8
    readonly property lengthUInt16 : Byte = 2
    readonly property remainLengthString : Byte = 8 //should be equal to lengthString
    
    
    readonly property MAX_PACKET_SIZE : Integer = 16
     
    readonly property START_BYTE : Byte = '0x12'
	readonly property STOP_BYTE : Byte = '0x13'
	readonly property ESCAPE_BYTE : Byte = '0x7D'
          
    property CODE_POSITION : Integer = 3
    property LENGTH_POSITION : Integer = 4
    property DATA_POSITION : Integer = 5
     
    property buffer : Byte[16]
	property index : Integer = 0
     
     function setHeader(code : Byte, length : Byte) 
     do
        index = 0
	 	storeByte(1) // source addr (not used)
	 	storeByte(1) // target addr (not used)
	 	storeByte(1) // frame num (not used)
        CODE_POSITION = index
        storeByte(code)
        LENGTH_POSITION = index
        storeByte(length)
        DATA_POSITION = index
        //We pad the rest with stop byte
        /*while(index < MAX_PACKET_SIZE) do
            storeByte(STOP_BYTE)
        end*/
        index = DATA_POSITION
	 end

    function storeByte(b : Byte) do
        //print("store byte " + b + " at index " + index)
        if (index == MAX_PACKET_SIZE) do
            //error("BUFFER OVERFLOW: " + b + " has been ignored. Current index = " + index)
            error("BUFFER OVERFLOW: a byte has been ignored")
        end
        if (index < MAX_PACKET_SIZE) do
	 	  buffer[index] = b
		  index = index + 1
        end
	end

    function readByte() : Byte do
        var b : Byte
        if (index < MAX_PACKET_SIZE) do
	 	  b = buffer[index]
          index = index + 1
        end
        if (index == MAX_PACKET_SIZE) do
          error("BUFFER OVERFLOW: trying to read out of buffer boundaries")
          b = STOP_BYTE
        end
        return b
	end
}

thing fragment Serializer includes PacketManager, OutputByteStreamMsgs {
    required port network {
        sends write_byte    
    }

    function send() do
        //print("send start byte = " + START_BYTE)
        network!write_byte(START_BYTE)
        readonly var stop : Integer = DATA_POSITION + buffer[LENGTH_POSITION]
        var i : Integer = 0
        while(i < stop) do
            var b : Byte = buffer[i]
            if (b == START_BYTE or b == STOP_BYTE or b == ESCAPE_BYTE) do
                //print("send escape byte = " + ESCAPE_BYTE)
                network!write_byte(ESCAPE_BYTE)
            end
            //print("send data byte(" + i + ") = " + b)
            network!write_byte(b)
            i = i + 1
        end
        //print("send stop byte = " + STOP_BYTE)
        network!write_byte(STOP_BYTE)
        index = 0
    end
}

thing fragment Deserializer includes PacketManager, InputByteStreamMsgs{
    required port network {
        receives receive_byte    
    }
    
    //function receive() do end//should be refined in a PSM thing
}

thing fragment ArraySerializer includes PacketManager, OutputByteArrayMsgs {
    required port out {
        sends write_bytes    
    }
    
    function escape() : Byte[34] do
        var escaped : Byte[34]
    
        readonly var stop : Integer = DATA_POSITION + buffer[LENGTH_POSITION]// - 1
        var i : Integer = 0
        var j : Integer = 0
        escaped[j] = START_BYTE
        j = j+1
        var current : Byte
        while(i < stop) do
          current = buffer[i]
          if (current == START_BYTE or current == STOP_BYTE or current == ESCAPE_BYTE) do
              escaped[j] = ESCAPE_BYTE 
              j = j + 1
          end
          escaped[j] = current
          j = j+1
          i = i+1
        end
        escaped[j] = STOP_BYTE
        /*while(j < 34) do
            escaped[j] = STOP_BYTE
            j = j+1
        end*/
    
        return escaped
    end
    
    function send() do
    	remainLengthString = lengthString
        out!write_bytes(escape())
    end
}

thing fragment ArrayDeserializer includes PacketManager, InputByteArrayMsgs{
    required port in {
        receives receive_bytes    
    }
    
    function forward()@abstract "true" do end//should be refined in a PSM thing  
    
    function receive(bytes : Byte[34]) do //34 max size with start/stop bytes + all other bytes escaped = 2*16 + 2
        index = 0
        //print("receive " + bytes)
        var size : Integer = DATA_POSITION + bytes[LENGTH_POSITION+1] + 1//bytes contains start/stop/escape bytes
        //print("size = " + size)
        var i : Integer = 0
        var current : Byte = bytes[i]
        if (current == START_BYTE) do
            i = i + 1
            var next : Byte = bytes[i]
            if (not(next == STOP_BYTE)) do
                var continue : Boolean = true
                while(continue and i < size) do
                    //print("i = " + i)
                    current = next
                    i = i + 1
                    next = bytes[i]
                    if (current == ESCAPE_BYTE) do
                        current = next
                        i = i + 1
                        size = size + 1
                        next = bytes[i]
                    end
                    storeByte(current)    
                    continue = not(next == STOP_BYTE and not(current == ESCAPE_BYTE))
                end
                storeByte(current)
                forward()
            end
        end
    end
}
