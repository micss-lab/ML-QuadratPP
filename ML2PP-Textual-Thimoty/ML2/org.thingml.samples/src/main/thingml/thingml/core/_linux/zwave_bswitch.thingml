//Required installation to run this example:
//1) Clone https://github.com/SINTEF-9012/TinyOpenZWaveApi
//2) Navigate to open-zwave/install
//3) Run: make && make install
//4) Navigate to TinyOpenZWaveApi
//5) Run: make && make install
//6) install the udev library, make sure that pthread is also installed

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/

import "../../thingml.thingml"
import "clock.thingml"

object CString
@c_type "const char*";

thing fragment Config {
	property pport : CString = "/dev/ttyUSB0"
	property config : CString = "/usr/local/share/openzwave/config/"
	property zwdir : CString = ""
	property domo_log : CString = "./DomoZWave_Log"
	property enableLog : Boolean = true
	property enableZWLog : Boolean = false
	property polltime : Integer = 0
}


thing fragment ControllerMsg {
	message initialize();
	message initialized();
	message controller_ready();
    message start();
    message started();
  	message node_quiried(nodeid : Integer);
  	message all_nodes_quiried();
}

object TinyController
@c_type "TinyController*";

thing fragment Controller includes ControllerMsg {

	property controller : TinyController

    provided port ctrlport {
    	sends initialized, controller_ready, started, node_quiried, all_nodes_quiried
    	receives initialize, start
    }
    
	statechart behavior init Start {
	
		state Start {
			on entry do
				print "Controller : waiting for command to initialize...\n"
			end
			
			transition->Init
			event ctrlport?initialize
		}
	
		state Init {
			on entry do
				print "Controller : initialize...\n"
				init_controller()
				ctrlport!initialized()
			end
			
			transition->Run
			event ctrlport?start
			
		}
		state Run {
			on entry do
				print "Controller : run...\n"
				start_controller()
				ctrlport!started()
			end
		}
	}
}

thing ZWaveController includes Controller, Config
@c_header "
#include <stdlib.h>
#include <cstdarg>
#include \"tinyozw/TinyZWaveFacade.h\"
#include \"tinyozw/devices/TinyController.h\"
#include \"tinyozw/libs/Utility.h\"

using namespace TinyOpenZWaveApi;
"
{
        
    function controller_ready_callback()
    	@c_prototype "void controller_ready_callback(void *_instance, ...)"
    	@c_instance_var_name "(ZWaveController_Instance *) _instance"
    	do
    		ctrlport!controller_ready()
    	end
    	
    function all_nodes_quiried_callback()
        @c_prototype "void all_nodes_quiried_callback(void *_instance, ...)"
    	@c_instance_var_name "(ZWaveController_Instance *) _instance"
    	do
    		ctrlport!all_nodes_quiried()
    	end
    
    function node_quiries_completed_callback()
     	@c_prototype "void node_quiries_completed_callback(void *_instance, ...)"
    	@c_instance_var_name "(ZWaveController_Instance *) _instance"
    	do
    		'va_list arguments;'
        	'va_start(arguments, _instance);'
        	'int nodeid = va_arg(arguments, int);'
    		'va_end(arguments);'
    		ctrlport!node_quiried('nodeid')
    	end
	
	function init_controller() do
		print "ZWaveNetwork: initializing ... \n"
		'ThingMLCallback* controller_ready = new ThingMLCallback(controller_ready_callback, _instance);'
		'ThingMLCallback* all_nodes_quiried = new ThingMLCallback(all_nodes_quiried_callback, _instance);'
		'ThingMLCallback* node_quiries_complete = new ThingMLCallback(node_quiries_completed_callback, _instance);'
		''& controller &' = OpenZWaveFacade::CreateController('& pport &');'
		''& controller &'->setControllerReadyCallback(controller_ready);'
		''& controller &'->setAllNodeQueriedCallback(all_nodes_quiried);'
		''& controller &'->setNodeQueriesCompleteCallback(node_quiries_complete);'
	end
	
	function start_controller() do
		print "ZWaveNetwork: starting ... \n"
		''& controller &'->start();'
	end
}

thing fragment PlugMsg {
	message turn_on();
	message turn_off();
	message turned_off();
	message turned_on();
	message no_change();
	message plug_init();
    message plug_ready();
    message plug_exit();
    message init_plug();
    message switch_ready();
    message switch_state( swstate : Boolean);
}

object BinarySwitch
@c_type "BinarySwitch*";

thing fragment Plug includes PlugMsg {

	property nodeId : Integer
	property cInstance : Integer
	property cIndex : Integer
    property bs : BinarySwitch
    property attempts : Integer = 0
    property exit_after_tries : Integer = 0
    property MAX_ATTEMPTS : Integer = 3
    property MAX_EXIT_AFTER :Integer = 20
	
	provided port switchport {
		receives turn_on, turn_off
	}
	
	provided port plugport {
		sends plug_init, plug_exit
		receives init_plug
	}

    provided port swintsendport {
        sends switch_state, switch_ready, turned_off, no_change, turned_on
    }

    required port swintrecport {
        receives switch_ready, switch_state, turned_off, no_change, turned_on
    }
	
	statechart behavior init Start {
		
		state Start {
			transition -> Ready
			event e : plugport?init_plug
		}
		
		state Ready {
			on entry do 
				print "Plug: initializing...\n"
				init_plug()
				plugport!plug_init()
            end
            
            transition -> TurnedOnOROff
            event swintrecport?switch_ready
		}
		
		state TurnedOnOROff {
			on entry do
				print "Plug: finding out plug state...\n"
				swintsendport!switch_state(isOn())
			end
			
			transition->TurnedOn
			event e : swintrecport?switch_state
			guard e.swstate
			
			transition->TurnedOff
			event e : swintrecport?switch_state
			guard not e.swstate
		} 
		
		state TurnedOn {
			on entry do
				print "Plug: is on...\n"
			end
			
			transition->TurningOff
			event switchport?turn_off
		}
		
		state TurningOff {
			on entry do
				print "Plug: attempting to turn off the plug...\n"
				turn_off()
				attempts = attempts + 1
			end
			
			transition->TurnedOff
			event swintrecport?turned_off
            guard exit_after_tries < MAX_EXIT_AFTER or exit_after_tries == MAX_EXIT_AFTER
            action do
                exit_after_tries = exit_after_tries + 1
            end
            
            transition->Exit
			event swintrecport?turned_off
            guard exit_after_tries > MAX_EXIT_AFTER
			
			transition->TurningOff
			event swintrecport?no_change
			guard attempts < MAX_ATTEMPTS
			
			transition->TurnedOnOROff
			event swintrecport?no_change
			guard attempts == MAX_ATTEMPTS or attempts > MAX_ATTEMPTS
			action attempts = 0
		}
		
		state TurnedOff {
			on entry do
				print "Plug: is off...\n"
			end
			
			transition->TurningOn
			event switchport?turn_on
		}
		
		state TurningOn {
			on entry do
				print "Plug: attempting to turn on the plug...\n"
				turn_on()
				attempts = attempts + 1
			end
			
			transition->TurnedOn
			event swintrecport?turned_on
            guard exit_after_tries < MAX_EXIT_AFTER or exit_after_tries == MAX_EXIT_AFTER
            action do
                exit_after_tries = exit_after_tries + 1
            end
            
            transition->Exit
			event swintrecport?turned_on
            guard exit_after_tries > MAX_EXIT_AFTER
            			
			transition->TurningOn
			event swintrecport?no_change
			guard attempts < MAX_ATTEMPTS
			
			transition->TurnedOnOROff
			event swintrecport?no_change
			guard attempts == MAX_ATTEMPTS or attempts > MAX_ATTEMPTS
			action attempts = 0
		}

        state Exit {
            on entry do
                print "Plug : exiting...\n"
                plugport!plug_exit()
            end
        }
	}
}

thing FibaroPlug includes Plug, Config
@c_header "
#include \"tinyozw/TinyZWaveFacade.h\"
#include \"tinyozw/devices/BinarySwitch.h\"
#include \"tinyozw/libs/Utility.h\"

using namespace TinyOpenZWaveApi;
"
 {
    
    function turned_on_callback()
    @c_prototype "void turned_on_callback(void *_instance, ...)"
    @c_instance_var_name "(FibaroPlug_Instance *) _instance"
    do
        swintsendport!turned_on()
    end
    
    function turned_off_callback()
    @c_prototype "void turned_off_callback(void *_instance, ...)"
    @c_instance_var_name "(FibaroPlug_Instance *) _instance"
    do
        swintsendport!turned_off()
    end
    
    function no_change_callback()
    @c_prototype "void no_change_callback(void *_instance, ...)"
    @c_instance_var_name "(FibaroPlug_Instance *) _instance"
    do
        swintsendport!no_change()
    end
    
    function init_callback()
    @c_prototype "void init_callback(void *_instance, ...)"
    @c_instance_var_name "(FibaroPlug_Instance *) _instance"
    do
    	swintsendport!switch_ready()
    end
	
	function init_plug() do
        print "FibaroPlug: initializing ... \n"
        'ThingMLCallback* turned_on = new ThingMLCallback(turned_on_callback, _instance);'
        'ThingMLCallback* turned_off = new ThingMLCallback(turned_off_callback, _instance);'
        'ThingMLCallback* no_change = new ThingMLCallback(no_change_callback, _instance);'
        'ThingMLCallback* device_init = new ThingMLCallback(init_callback, _instance);'
        bs = 'new BinarySwitch();'
        bs = ''&bs&'->BinarySwitch::Init(OpenZWaveFacade::GetController(' & pport & '), (uint8)' & nodeId & ',(uint8)' & cInstance & ', (uint8)'& cIndex &');'
        ''&bs&'->setDeviceInitCallback(device_init);'
		''&bs&'->setTurnedOnCallback(turned_on);'
		''&bs&'->setTurnedOffCallback(turned_off);'
		''&bs&'->setNoChangeCallback(no_change);'
	end
	
    function turn_on() do
         print "FibaroPlug: turning plug on ... \n"
        ''&bs&'->turnOn();'
    end

    function turn_off() do
        print "FibaroPlug: turning plug off ... \n"
        ''&bs&'->turnOff();'
    end
    
    function isOn() : Boolean do
    	return ''&bs&'->isOn();'
    end
}

thing fragment HomeCenter includes PlugMsg, ControllerMsg, ClockMsgs, Config {
	
	property plugid : Integer
	
	required port switchport {
		sends turn_on, turn_off
		receives turned_off, turned_on, no_change
	}
	
	required port plugport {
		sends init_plug
		receives plug_init, plug_exit
	}
	
	required port ctrlport {
		sends initialize, start
		receives initialized, started, node_quiried, all_nodes_quiried, controller_ready
	}

    required port signal {
        receives clock_tick
    }
	
	statechart behavior init Start {
		state Start {
			on entry do
				print "HomeCenter: initialize network ...\n"
				init_network()
				ctrlport!initialize()
			end
			
			transition -> InitPlug
			event e : ctrlport?initialized
		}
		
		state InitPlug {
			on entry do
				print "HomeCenter: initialize home plug ...\n"
				plugport!init_plug()
			end
			transition->StartController
			event plugport?plug_init action print "HomeCenter: plug is ready \n"
		}
		
		state StartController {
			on entry do
				print "HomeCenter: start controller ...\n"
				ctrlport!start()
			end
			
			transition->WaitForSwitch
			event ctrlport?controller_ready
		}
		
		state WaitForSwitch {
			on entry do
				print "HomeCenter: waiting for plug to be initialized ...\n"
			end
			
			transition->PlugIsReady
			event e : ctrlport?node_quiried
			guard e.nodeid == plugid
			
			transition->WaitForSwitch
			event e : ctrlport?node_quiried
			guard not e.nodeid == plugid
		}
		
		state PlugIsReady {
			on entry do
				print "HomeCenter: sending on and off signal"
				switchport!turn_on()
				switchport!turn_off()
			end
		
			transition->PlugIsReady
			event signal?clock_tick

            transition->Quit
            event plugport?plug_exit
		}

        state Quit {
            on entry do
				print "HomeCenter: Quit...\n"
                quite_network()
			end
        }
	}
}

thing ZWaveHomeCenter includes HomeCenter 
@c_header "
#include \"tinyozw/TinyZWaveFacade.h\"
#include \"tinyozw/libs/Utility.h\"

using namespace TinyOpenZWaveApi;
"
{
	
	function init_network()
		do
			'OpenZWaveFacade::Init('& config &','& zwdir &','& domo_log &','& enableLog &','& enableZWLog &','& polltime &');'
		end
	
	function quite_network()
		do
			'OpenZWaveFacade::Quite();'
		end
}

configuration LinuxHomeCenterBSwitch
  @output_folder "/home/tmp/"
  @debug "true"
  @debug_fifo "true"
  @debug_message_send ".*"
  @debug_message_receive ".*"
  @add_c_libraries "udev pthread openzwave tinyozw"
{
	instance p1 : FibaroPlug
	set p1.nodeId = 2
	set p1.cInstance = 1
	set p1.cIndex = 0
	
	instance app : ZWaveHomeCenter
	set app.plugid = 2
		
	instance n : ZWaveController


    instance clock : ClockLinux
    set clock.period = 5000
	
	// Create and connect the test app
	connector app.switchport => p1.switchport
	connector app.ctrlport => n.ctrlport
    connector app.plugport => p1.plugport
    connector app.signal => clock.signal
    
    connector p1.swintrecport => p1.swintsendport
}
