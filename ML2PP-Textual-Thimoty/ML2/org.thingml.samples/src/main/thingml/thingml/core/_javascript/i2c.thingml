import "../i2c.thingml"


object I2C
    @js_type "var";

thing I2C includes I2CServer 
@js_dep "mraa:^0.5.4"
@platform "javascript"
{

	property i2c : I2C
	property mraa : I2C
	property data : Byte[256]
	property res : String

	statechart I2CImpl init Idle {
	
		state Idle {
	        on entry do
	            '' & mraa &' = require(\'mraa\');
	         	console.log(\'MRAA Version: \' + ' & mraa &'.getVersion());'
	        end
	        
	        transition I2C -> Ready
	        event m : I2C?I2CInit
	        action do
	            i2c = 'new ' & mraa &'.I2c('&m.bus&');'
	            I2C!initialized()
	        end
		}
		
		state Ready {
	        internal event m : I2C?address
	        action do
	            res = ''& i2c&'.address('&m.address&');'
	            I2C!result(res)       
	        end
	        
	        internal event m : I2C?frequency
	        action do
	            res = ''& i2c&'.frequency ('&m.mode&');'
	            I2C!result(res)       
	        end
	        
	        internal event m : I2C?readByte
	        action do
	             data = ''& i2c &'.readByte();'
	             I2C!readResult(data)    
	        end
	        
	        internal event m : I2C?read
	        action do
	             data = ''& i2c &'.read('&m.len&');'
	             I2C!readResult(data)    
	        end
	        
	        internal event m : I2C?readReg
	        action do
	             data = ''& i2c &'.readReg('&m.reg&');'
	             I2C!readResult(data)    
	        end
	        
	        internal event m : I2C?writeByte
	        action do
	             res = ''& i2c &'.write('&m.data&');'
	             I2C!result(res)    
	        end
	        
	        internal event m : I2C?write
	        action do
	             res = ''& i2c &'.writeByte('&m.len&');'
	             I2C!result(res)    
	        end
	        
	        internal event m : I2C?writeReg
	        action do
	             res = ''& i2c &'.writeReg('&m.reg&','&m.data&');'
	             I2C!result(res)    
	        end
	        
	        internal event m : I2C?writeWordReg
	        action do
	             res = ''& i2c &'.writeWordReg('&m.reg&','&m.data&');'
	             I2C!result(res)    
	        end
		}
	}
}



