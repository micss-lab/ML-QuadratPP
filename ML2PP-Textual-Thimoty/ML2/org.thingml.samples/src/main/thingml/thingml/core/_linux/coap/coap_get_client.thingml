//Required installation to run this example:
//0) smcp(https://github.com/darconeous/smcp) and thingml smcp adoptation(https://github.com/SINTEF-9012/thingml-coap.c-client) are required to run this example
//1) follow smcp instructions to install coap libraries
//2) Clone https://github.com/SINTEF-9012/thingml-coap.c-client
//3) Navigate to thingml-coap.c-client
//4) Run: make && make install

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "../../coap_client.thingml"


object ThingMLCOAPContext
@c_type "ThingMLCOAPContext*";

thing COAPClientGetPSM includes COAPClientMsg 
@c_header "
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <stdint.h>

#include \"thingmlcaop/thingml_coap_utility.h\"
#include \"thingmlcaop/cmd_get.h\"
"
{

	property context : ThingMLCOAPContext
	property server_url : CString
	property server_port : UInt16
	
	provided port coapport {
		receives get, shutdown, initialize
		sends error_occured
	}
	
	provided port synccaopport @sync_send "true" {
		sends response
	}

    function coap_error_callback()
	@c_prototype "void coap_error_callback(void *_instance, ...)"
    @c_instance_var_name "(struct COAPClientGetPSM_Instance *) _instance"    
    do
    	'int reason;'
		'va_list valist;'
		'va_start(valist, _instance);'
	
		'reason = va_arg(valist, int);'
	
		'va_end(valist);'
    	'printf("coap_error_callback is called\n");'
    	coapport!error_occured('reason')
    end
    
    function coap_message_recieved_callback()
	@c_prototype "void coap_message_recieved_callback(void *_instance, ...)"
    @c_instance_var_name "(struct COAPClientGetPSM_Instance *) _instance"    
    do
		'char* message;'
		'va_list valist;'
		'va_start(valist, _instance);'
	
		'message = va_arg(valist, char*);'
	
		'va_end(valist);'
		'printf("coap_message_recieved_callback %s\n", message);'
		synccaopport!response('message')
    end

    
    function init_context()
    do
    	''& context &' = (ThingMLCOAPContext*) malloc(sizeof(ThingMLCOAPContext));'
    	''& context &'->thing_instance = _instance;'
    	''& context &'->fn_onerror_callback = coap_error_callback;'
		''& context &'->fn_onmsgrcv_callback = coap_message_recieved_callback;'
		''& context &'->client_coap_config = coap_client_config_default;'
    end
    
    function do_get_request()
    do
    	'tool_cmd_get_url((void*) '& context &');'
    end
    
    statechart Behavior init Start {
    
    	state Start {
    		on entry do
    			init_context()
    		end
    		
    		internal event e: coapport?get
    		action do
    			''& context &'->port = ' & server_port & ';'
    			''& context &'->url = ' & server_url & ';'
    			do_get_request()
    		end
    		
    		transition -> Finalize
    		event coapport?shutdown
    	}
    	
    	state Finalize {
    		on entry do
    			'free('& context &');'
    		end
    		
    		transition -> Start
    		event coapport?initialize
    	}
    }

}
