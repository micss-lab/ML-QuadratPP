//IMPORTANT NOTE to run this example:
// 0) download and install https://github.com/warmcat/libwebsockets (follow their instructions)
//      NOTE : command 'cmake ..' must be run from the libwebsockets/build directory (build should be created manually)
//	NOTE : libssl-dev should be installed before
// 1) download and install from https://github.com/SINTEF-9012/TinyWebSockets (make installwebsockets && make && make install)
//      NOTE : both libwebsockets and TinyWebSockets should be in the same directory



//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/

import "../websocket.thingml"


object WebSocketMirrorServer
@c_type "WebSocketMirrorServer*";

thing WebSMirrorServer includes WebSocketServer
@c_header "
#include <cstdarg>
#include \"tinyws/client-server/WebSocketFacade.h\"
#include \"tinyws/client-server/WebSocketClient.h\"
#include \"tinyws/client-server/WebSocketMirrorServer.h\"

using namespace WebSockets;
"
{
    
    property server : WebSocketMirrorServer
    property rmessage : CString
    
	function on_open_callback()
		@c_prototype "void on_open_callback(void *_instance, ...)"
		@c_instance_var_name "(WebSMirrorServer_Instance *) _instance"
    do
    	'printf("\tWebSocketMirrorServer: on_open_callback");'
    	lifecycle!onOpen()
    end
    
    function on_close_callback()
		@c_prototype "void on_close_callback(void *_instance, ...)"
		@c_instance_var_name "(WebSMirrorServer_Instance *) _instance"
    do
    	'printf("\tWebSocketMirrorServer: on_close_callback");'
    	lifecycle!onClose()
    end
    
    function on_error_callback()
		@c_prototype "void on_error_callback(void *_instance, ...)"
		@c_instance_var_name "(WebSMirrorServer_Instance *) _instance"
    do
        'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* message = va_arg(arguments, char*);'
    	'va_end(arguments);'
    	'printf("\tWebSocketMirrorServer: on_error_callback with message -> %s\n", message);'
    	err!onError('message')
    end
    
    function on_message_callback()
		@c_prototype "void on_message_callback(void *_instance, ...)"
		@c_instance_var_name "(WebSMirrorServer_Instance *) _instance"
    do
        'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* message = va_arg(arguments, char*);'
    	'va_end(arguments);'
    	'printf("\tWebSocketMirrorServer: on_message_callback with message -> %s\n", message);'
    	messaging!onMessage('message')
    end
    
    function init_server()
    do
    	server = 'WebSocketFacade::InitWebSocketMirrorServer(atoi('& _port &'), NULL);'
    	'ThingMLCallback* tml_op_open_callback = new ThingMLCallback(on_open_callback, _instance);'
		'ThingMLCallback* tml_op_close_callback = new ThingMLCallback(on_close_callback, _instance);'
		'ThingMLCallback* tml_op_error_callback = new ThingMLCallback(on_error_callback, _instance);'
		'ThingMLCallback* tml_op_message_callback = new ThingMLCallback(on_message_callback, _instance);'
		''& server &'->setCallbacks(tml_op_open_callback, tml_op_close_callback, tml_op_message_callback, tml_op_error_callback);'
    end
      
    statechart behavior init Init {
    
        state Init {
            
            on entry do
                'printf("\tINIT ON PORT: %s\n",'& _port &');'
            	init_server()
                '' & server & '->open();'
                lifecycle!server_launched()
            end
            
            transition -> Stop
            event lifecycle?stop_server
            
        }
                
        state Stop {
            
            on entry '' & server & '->close();'
            
            transition -> Start
            event lifecycle?start
            
        }
        
        state Start {
            
            on entry do
                print "\tserver attempts to start\n"
            	'' & server & '->open();'
                lifecycle!server_launched()
            end
            
            transition -> Start
            event lifecycle?stop_server
            
        }        
    } 
}

configuration WSServer
  @output_folder "/home/tmp"
  @debug "true"
  @debug_fifo "true"
  @debug_message_send ".*"
  @debug_message_receive ".*"
  @add_c_libraries "pthread websockets tinyws"
{

    instance server : WebSMirrorServer    
       set server._port = "7681"
}
