import "../ble.thingml"

	object BLE
    @js_type "var";
    
    object Peripherals
    @js_type "var";

thing BLE includes BLEServer, BLEServerInternal
@platform "javascript"
{

	function initialize() do
	   	ble =' require(\'noble\');'
	   	''&ble&'.on(\'stateChange\', function(state) {
	   	console.log(\'stateChange\')'
  		BLEInternal!stateChange('state')'
  		console.log(\'sent state \' +state)	
		});'
		
		''&ble&'.on(\'discover\', function(peripheral) {
		var perStr = JSON.stringify(peripheral, function( key, value) { 
  			if( key == \'_noble\') { return value.id;}
  			else {return value;}
			});'
  		BLEInternal!stateChange('perStr')'
  		console.log(\'sent state \' +perStr)	
		});'
		
	end

	property ble : BLE
	property peripherals : Peripherals

	statechart BLEImpl init Idle {
	
		state Idle {
	        on entry do
	         	initialize()
	        end
	        
	        transition SCANNING -> Scanning
	        event m : BLEInternalRec?stateChange
	        guard m.st == "poweredOn"
	        action do
        		print("Start scanning received")
            	''& ble &'.startScanning([], true);'
	        end
	        
	        transition EXIT -> End
	        event m : BLEInternalRec?stateChange
	        guard not (m.st == "poweredOn")
	        action do
        	     print("Stop scanning")
            	''& ble &'.stopScanning();'
	        end
		}
		
		state Scanning {
	        internal event m : BLEInternalRec?discover
	        action do
	            BLE!discover(m.peripheral)
	        end
	        
	        transition EXIT -> End
	        event m : BLE?stopScanning
	        action do	        	
	            ''& ble &'.stopScanning();'
	        end
	        
	      }
		
		state End {}
		
		
	}
}

configuration BLE {
	instance ble : BLE
	connector ble.BLEInternalRec => ble.BLEInternal
}

