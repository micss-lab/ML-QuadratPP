/* ThingML Framework */

import "../comm.thingml"

object serial;
object SerialPort;

//IMPORTANT: please install serialport beforehand:
//          npm install serialport

thing SerialJS includes IOByteArray
@pim "IOStream"
@platform "javascript"
@javascript "node"
{
    readonly property serialPort : String = "COM13"
    readonly property lib : serial = 'require("serialport")'
    property serialP : SerialPort
            
    property buffer : Byte[18]            
    property index : Integer = 0
            
	function receive(byte : Byte)
    @private "true"
    do
        //print("receiving " + byte + " from serial port...")
        if (buffer[0] == '0x13' and byte == '0x12' or buffer[0] == '0x12') do//if new buffer or start byte already there
            if (not(byte == '0x13') or buffer[index-1] == '0x7D') do //if not stop byte (or if it is escaped)
                buffer[index] = byte
                index = index + 1
            end 
            if (byte == '0x13' and not(buffer[index-1] == '0x7D')) do //stop byte
               print("forward buffer!")
               IOStream!receive_bytes(buffer)
               index = 0
               var i : Integer = 0
               while (i < 18) do
                buffer[i] = '0x13'
                i = i + 1
               end
            end
        end        
        //print("")
    end
    
    function initSerial() do 
        //initialize buffer
        var i : Integer = 0
        while (i < 18) do
            buffer[i] = '0x13'
            i = i + 1
        end
    
        //initialize and open serial port
        serialP = 'new ' & lib & '.SerialPort(' & serialPort & ', {baudrate: 9600,   parser: ' & lib & '.parsers.byteLength(1)}, false);'
        '' & serialP & '.open(function (error) {'
        'if (error)'
        error("Problem opening the serial port... It might work, though most likely not :-)")
        'else'     
        '' & serialP & '.on(\'data\', function(data) {'
                //print('data')
                receive('data[0]')
            '});'  
        print("Serial port opened sucessfully!")
        '})'
    end
    
    function killSerial() do
        '' & serialP & '.close(function (error) {' 
        'if (error)'
        error("Problem closing the serial port...")
        'else'       
        print("serial port closed!") 
        '});'
    end
        

    statechart behavior init default {
            on entry do
                initSerial()    
                print("Serial port ready!")    
            end
            
            on exit do
                killSerial()
                print("Serial port killed, RIP!")
            end
            
        state default {            
            internal event wb : IOStream?write_bytes
            action do               
                '' & serialP & '.write(' & wb.b & ', function(err, results) {'
                    //print("err" + 'err')
                    //print("results" + 'results')
                '});'
            end
        }    
    }    
}

configuration TestSerialJS {
    instance serial : SerialJS
}
