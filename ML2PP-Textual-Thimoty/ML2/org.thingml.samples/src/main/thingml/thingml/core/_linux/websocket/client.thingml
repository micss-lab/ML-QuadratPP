//IMPORTANT NOTE to run this example:
// 0) download and install https://github.com/warmcat/libwebsockets (follow their instructions)
//      NOTE : command 'cmake ..' must be run from the libwebsockets/build directory (build should be created manually)
//	NOTE : libssl-dev should be installed before
// 1) download and install from https://github.com/SINTEF-9012/TinyWebSockets (make installwebsockets && make && make install)
//      NOTE : both libwebsockets and TinyWebSockets should be in the same directory



//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "../../websocket.thingml"

object WebSocketClient
@c_type "WebSocketClient*";

thing CPPWSClient includes WebSocketClient
@c_header "
#include <stdio.h>
#include <string>
#include <iostream>
#include <stdlib.h>
#include <cstdarg>
#include \"tinyws/client-server/WebSocketFacade.h\"
#include \"tinyws/client-server/WebSocketClient.h\"
#include \"tinyws/libs/Utility.h\"

using namespace WebSockets;
"
{
    property client : WebSocketClient
    property _host : CString
    
    property status : WS_ERR
    
    function on_open_callback_client()
		@c_prototype "void on_open_callback_client(void *_instance, ...)"
		@c_instance_var_name "(CPPWSClient_Instance *) _instance"
    do
    	'printf("\tCPPWSClient: on_open_callback\n");'
    	lifecycle!onOpen()
    end
    
    function on_close_callback_client()
		@c_prototype "void on_close_callback_client(void *_instance, ...)"
		@c_instance_var_name "(CPPWSClient_Instance *) _instance"
    do
    	'printf("\tCPPWSClient: on_close_callback\n");'
    	lifecycle!onClose()
    end
    
    function on_error_callback_client()
		@c_prototype "void on_error_callback_client(void *_instance, ...)"
		@c_instance_var_name "(CPPWSClient_Instance *) _instance"
    do
        'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* message = va_arg(arguments, char*);'
    	'va_end(arguments);'
    	'printf("\tWCPPWSClient: on_error_callback with message -> %s\n", message);'
    	err!onError('message')
    end
    
    function on_message_callback_client()
		@c_prototype "void on_message_callback_client(void *_instance, ...)"
		@c_instance_var_name "(CPPWSClient_Instance *) _instance"
    do
        'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* message = va_arg(arguments, char*);'
    	'va_end(arguments);'
    	'printf("\tCPPWSClient: on_message_callback with message -> %s\n", message);'
    	messaging!onMessage('message')
    end
    
    function init_client()
    do
    	 client = 'WebSocketFacade::InitWebSocketClient('& _host &', atoi('& _port &'), NULL);'
    	'ThingMLCallback* tml_op_open_callback = new ThingMLCallback(on_open_callback_client, _instance);'
		'ThingMLCallback* tml_op_close_callback = new ThingMLCallback(on_close_callback_client, _instance);'
		'ThingMLCallback* tml_op_error_callback = new ThingMLCallback(on_error_callback_client, _instance);'
		'ThingMLCallback* tml_op_message_callback = new ThingMLCallback(on_message_callback_client, _instance);'
		''& client &'->setCallbacks(tml_op_open_callback, tml_op_close_callback, tml_op_message_callback, tml_op_error_callback);'
    end
    
    statechart behavior init Init {
    
        state Init {
            
            on entry do
                'printf("\tINIT CLIENT ON HOST: %s %s\n",'& _host &', '& _port& ');'
               	init_client()
            end
            
            transition -> Start
            event lifecycle?start_client
            
        }
        
        state Start {
            on entry do
            	'printf("\tclient attempts to establish connection\n");'
                 '' & client & '->open();'
                lifecycle!client_launched()
            end
            
            transition -> Serve
            event lifecycle?start_server
        }
        
        state Serve {
            on entry do
            	'printf("\tclient is in a serving state\n");'
            end
            
            internal event s : messaging?send
            action do
                '' & client & '->sendMessage(' & s.msg & ');'
            end
            
            transition -> Stopped
            event lifecycle?stop_client  
        }
        
        state Stopped {
            
            on entry '' & client & '->close();'
            
            transition -> Start
            event lifecycle?start_client
        }        
    }  
}
