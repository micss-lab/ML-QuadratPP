import "xml/xml_parser_xpath.thingml"
import "clock.thingml"


thing XMLParserPIM includes XMLParserMsg, ClockMsgs {

	property xml_str : CString = '"<?xml version=\"1.0\" encoding=\"UTF-8\"?><senml xmlns=\"urn:ietf:params:xml:ns:senml\" bn=\"urn:dev:mac:0024befffe804ff1\" bt=\"0\" ver=\"1\"><e n=\"temp\" u=\"Cel\" v=\"25.000000\" bfalse=\"false\" btrue=\"true\"/></senml>"'
	property boolean_key : CString = '"string(//*[local-name()=\'e\'][1]/@bfalse)"'
	property str_key : CString = '"string(//*[local-name()=\"e\"][1]/@u)"'
	property int_key : CString = '"number(//*[local-name()=\"e\"][1]/@v)"'
	property double_key : CString = '"number(//*[local-name()=\"e\"][1]/@v)"'

	required port boolparser @sync_send "true" {
		sends decode_boolean_xml
		receives value_boolean_xml
	}
	
	required port strparser @sync_send "true" {
		sends decode_string_xml
		receives value_string_xml
	}
	
	required port intparser @sync_send "true" {
		sends decode_integer_xml
		receives value_integer_xml
	}
	
	required port doubleparser @sync_send "true" {
		sends decode_double_xml
		receives value_double_xml
	}
	
	required port errorport {
		receives error_decode_xml
	}
	
	required port signal {
		receives clock_tick
	}
	
	statechart Behavior init Start {
	
		state Start {
			
			internal event signal?clock_tick
			action do
				boolparser!decode_boolean_xml(xml_str, boolean_key)
				strparser!decode_string_xml(xml_str, str_key)
				intparser!decode_integer_xml(xml_str, int_key)
				doubleparser!decode_double_xml(xml_str, double_key)
			end
			
			internal event errorport?error_decode_xml
			action print "failed to parse xml... \n"
			
			internal event e : boolparser?value_boolean_xml
			action do
				if(e.value) print "extracted value - true \n"
				if(not e.value) print "extracted value - false \n" 
			end
			
			internal event e : strparser?value_string_xml
			action do
				print "some string value is received...\n"
			end
			
			internal event e : intparser?value_integer_xml
			action do
				if(e.value == 25) print "extracted value int is 25\n"
				if(not e.value == 25) print "some other int value is received\n"
			end
			
			internal event e : doubleparser?value_double_xml
			action do
				if(e.value == 25) print "extracted value double is 25.0\n"
				if(not e.value == 25) print "some other double value is received\n"
			end
		}
	}
	
	
}

configuration XMLParserExample
  @output_folder "/home/tmp/"
  @debug "true"
  @debug_fifo "true"
  @debug_message_send ".*"
  @debug_message_receive ".*"
  @add_c_libraries "tmlxpathvalue xml2"
{

	instance xmlparserpim : XMLParserPIM
	instance xmlparserpsm : XMLParserPSM
	
	instance clock : ClockLinux
		set clock.period = 5000
	
	connector xmlparserpim.boolparser => xmlparserpsm.boolparser
	connector xmlparserpim.strparser => xmlparserpsm.strparser
	connector xmlparserpim.intparser => xmlparserpsm.intparser
	connector xmlparserpim.doubleparser => xmlparserpsm.doubleparser
	connector xmlparserpim.errorport => xmlparserpsm.errorport
	
	connector xmlparserpim.signal => clock.signal
}
