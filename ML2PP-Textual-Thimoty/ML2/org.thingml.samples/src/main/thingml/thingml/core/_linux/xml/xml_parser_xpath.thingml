//Required installation to run this example:
//0) xml2 (http://www.xmlsoft.org/downloads.html) and tmlxpathvalue (https://github.com/SINTEF-9012/thingml-xpath.c-value) are required to run this example
//1) if you linux installation does not provide xml2, please follow instructions on http://www.xmlsoft.org/ to install libxml2
//1) Clone https://github.com/SINTEF-9012/thingml-xpath.c-value
//2) Run: make && sudo make install

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "../../xml_parser_xpath.thingml"


object ThingMLXPathParserContext
	@c_type "ThingMLXPATHParserCnxt*";
	

thing XMLParserPSM includes XMLParserMsg
@c_header "
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <stdint.h>


#include \"thingmlxpath/thingml_xpath.h\"
"
{
	
	property context : ThingMLXPathParserContext = 'malloc(sizeof(ThingMLXPATHParserCnxt));'

    function xpath_error_callback()
    @c_prototype "void xpath_error_callback(void *_instance, ...)"
    @c_instance_var_name "(struct XMLParserPSM_Instance *) _instance"
    do
    	'printf("failed to parse string...\n");'
    	errorport!error_decode_xml()
    end
    
    function xpath_integer_value_callback()
    @c_prototype "void xpath_integer_value_callback(void *_instance, ...)"
    @c_instance_var_name "(struct XMLParserPSM_Instance *) _instance"
    do
		'int value;'
		'va_list valist;'
		'va_start(valist, _instance);'
		'value = va_arg(valist, int);'
		'va_end(valist);'
		'printf("xpath_integer_value_callback - %d \n", value);'
		intparser!value_integer_xml('value')		    	
    end
	
	function xpath_double_value_callback()
    @c_prototype "void xpath_double_value_callback(void *_instance, ...)"
    @c_instance_var_name "(struct XMLParserPSM_Instance *) _instance"
    do
		'double value;'
		'va_list valist;'
		'va_start(valist, _instance);'
		'value = va_arg(valist, double);'
		'va_end(valist);'
		'printf("xpath_double_value_callback - %f \n", value);'
		doubleparser!value_double_xml('value')    	
    end

	function xpath_boolean_value_callback()
    @c_prototype "void xpath_boolean_value_callback(void *_instance, ...)"
    @c_instance_var_name "(struct XMLParserPSM_Instance *) _instance"
    do
		'int value;'
		'va_list valist;'
		'va_start(valist, _instance);'
		'value = va_arg(valist, int);'
		'va_end(valist);'
		'printf("xpath_boolean_value_callback - %d \n", value);'
		boolparser!value_boolean_xml('value')	 	
    end
    
   	function xpath_string_value_callback()
    @c_prototype "void xpath_string_value_callback(void *_instance, ...)"
    @c_instance_var_name "(struct XMLParserPSM_Instance *) _instance"
    do
		'char* value;'
		'va_list valist;'
		'va_start(valist, _instance);'
		'value = va_arg(valist, char*);'
		'va_end(valist);'
		'printf("xpath_string_value_callback - %s \n", value);'
		strparser!value_string_xml('value')	 	
    end
	
	function decodeBoolean(xml_value : CString, xpath_value : CString)
	do
		'parse_boolean('& xml_value &', '& xpath_value &', (void*) '& context &');'
	end
	
	function decodeString(xml_value : CString, xpath_value : CString)
	do
		'parse_string('& xml_value &', '& xpath_value &', (void*) '& context &');'
	end
	
	function decodeInteger(xml_value : CString, xpath_value : CString)
	do
		'parse_integer('& xml_value &', '& xpath_value &', (void*) '& context &');'
	end
	
	function decodeDouble(xml_value : CString, xpath_value : CString)
	do
		'parse_double('& xml_value &', '& xpath_value &', (void*) '& context &');'
	end
	
	function initialize_parser()
	do
		''& context &'->thing_instance = _instance;'
		''& context &'->fn_onerror_callback = xpath_error_callback;'
		''& context &'->fn_parse_integer_callback = xpath_integer_value_callback;'
		''& context &'->fn_parse_double_callback = xpath_double_value_callback;'
		''& context &'->fn_parse_string_callback = xpath_string_value_callback;'
		''& context &'->fn_parse_boolean_callback = xpath_boolean_value_callback;'
	end
	
	
	provided port boolparser @sync_send "true" {
		receives decode_boolean_xml
		sends value_boolean_xml
	}
	
	provided port strparser @sync_send "true" {
		receives decode_string_xml
		sends value_string_xml
	}
	
	provided port intparser @sync_send "true" {
		receives decode_integer_xml
		sends value_integer_xml
	}
	
	provided port doubleparser @sync_send "true" {
		receives decode_double_xml
		sends value_double_xml
	}
	
	provided port errorport {
		sends error_decode_xml
	}
	
	statechart Behavior init Start {
	
		state Start {
			on entry do
				initialize_parser()
			end
		
			internal event e : boolparser?decode_boolean_xml
			action decodeBoolean(e.xml_str, e.xpath_srt)
		
			internal event e : strparser?decode_string_xml
			action decodeString(e.xml_str, e.xpath_srt)
			
			internal event e : intparser?decode_integer_xml
			action decodeInteger(e.xml_str, e.xpath_srt)
			
			internal event e : doubleparser?decode_double_xml
			action decodeDouble(e.xml_str, e.xpath_srt)
		}
	}
}
