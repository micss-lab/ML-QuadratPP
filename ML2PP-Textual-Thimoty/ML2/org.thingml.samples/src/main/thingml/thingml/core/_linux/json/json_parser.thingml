//Required installation to run this example:
//0) cson (https://github.com/SINTEF-9012/cson-purified) is required to run this example
//1) Clone https://github.com/SINTEF-9012/cson-purified
//2) Run: make && sudo make install

//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/


import "../../../thingml.thingml"
import "../../json_parser.thingml"


object CSONObject
	@c_type "cson_object*";
	
object CSONValue
	@c_type "cson_value*";
	
object CSONValuePTP
	@c_type "cson_value**";

thing JSONParserPSM includes JSONParserMsg
@c_header "
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include \"cson/cson.h\"
"
{

	function testJSON(json_str: CString, cson_root : CSONValuePTP) : CSONObject
	do
		var object : CSONObject = 'NULL'
		'cson_parse_opt opt = cson_parse_opt_empty;'
		'cson_parse_info inf = cson_parse_info_empty;'
		'int rc = cson_parse_string('& cson_root &', '& json_str &', strlen('& json_str &'), &opt, &inf);'

		'if (rc != 0) {'
			'printf("Error code %d (%s)!\n", rc, cson_rc_string(rc));'
			return object
		'}'

		''& object &' = cson_value_get_object(*'& cson_root &');'
		'if('& object &' == NULL) printf("root is not an object\n");'
		
		return object
	end
	
	function cleanupJSON(cson_root : CSONValuePTP)
	do
		'cson_value_free(*'& cson_root &');'
	end
	
	function testJSONValue(json_obj : CSONObject, key : CString) : CSONValue
	do
		var value : CSONValue = 'NULL'
		'' & value &'= cson_object_get_sub2('& json_obj &', '& key &');'
		'if (' & value &' == NULL)'
			'printf("cannot extract value\n");'
		return value
	end
	
	function decodeBoolean(json_value : CSONValue) : Boolean
	do
		'char bool_value = cson_value_get_bool('& json_value &');'
		return 'bool_value' 
	end
	
	function decodeString(json_value : CSONValue) : CString
	do
		'char const * str_value = cson_value_get_cstr('& json_value &');'
		return 'str_value'
	end
	
	function decodeInteger(json_value : CSONValue) : Integer
	do
		'uint8_t value_int = cson_value_get_integer('& json_value &');'
		return 'value_int'
	end
	
	function decodeDouble(json_value : CSONValue) : Double
	do
		'double value_double = cson_value_get_double('& json_value &');'
		return 'value_double'
	end
	
	function testJSONStringCSONValue(json_str : CString, key : CString, cson_root_value : CSONValuePTP) : CSONValue
	do
		var cson_val : CSONValue = 'NULL'
		var cson_obj : CSONObject = testJSON(json_str, cson_root_value)
		if(not(cson_obj == 'NULL')) do
			cson_val  = testJSONValue(cson_obj, key)
		end
		return cson_val
	end
	
	provided port boolparser @sync_send "true" {
		receives decode_boolean
		sends value_boolean, error_decode
	}
	
	provided port strparser @sync_send "true" {
		receives decode_string
		sends value_string, error_decode
	}
	
	provided port intparser @sync_send "true" {
		receives decode_integer
		sends value_integer, error_decode
	}
	
	provided port doubleparser @sync_send "true" {
		receives decode_double
		sends value_double, error_decode
	}
	
	statechart Behavior init Start {
	
		state Start {
		
			internal event e : boolparser?decode_boolean
			action do
				var cson_root_value : CSONValue = 'NULL'
				var cson_val : CSONValue = testJSONStringCSONValue(e.json_str, e.key, '&'& cson_root_value &'')
				
				if(not(cson_val == 'NULL')) do
					var parsed_result : Boolean = decodeBoolean(cson_val)
					boolparser!value_boolean(parsed_result)
				end
				if(cson_val == 'NULL') do
					boolparser!error_decode()
				end
				
				cleanupJSON('&'& cson_root_value &'')
			end
		
			internal event e : strparser?decode_string
			action do
				var cson_root_value : CSONValue = 'NULL'
				var cson_val : CSONValue = testJSONStringCSONValue(e.json_str, e.key, '&'& cson_root_value &'')
				
				if(not(cson_val == 'NULL')) do
					var parsed_result : CString = decodeString(cson_val)
					strparser!value_string(parsed_result)
				end
				if(cson_val == 'NULL') do
					strparser!error_decode()
				end
				
				cleanupJSON('&'& cson_root_value &'')
			end
			
			internal event e : intparser?decode_integer
			action do
				var cson_root_value : CSONValue = 'NULL'
				var cson_val : CSONValue = testJSONStringCSONValue(e.json_str, e.key, '&'& cson_root_value &'')
				
				if(not(cson_val == 'NULL')) do
					var parsed_result : Integer = decodeInteger(cson_val)
					intparser!value_integer(parsed_result)
				end
				if(cson_val == 'NULL') do
					intparser!error_decode()
				end
				
				cleanupJSON('&'& cson_root_value &'')
			end
			
			internal event e : doubleparser?decode_double
			action do
				var cson_root_value : CSONValue = 'NULL'
				var cson_val : CSONValue = testJSONStringCSONValue(e.json_str, e.key, '&'& cson_root_value &'')
				
				if(not(cson_val == 'NULL')) do
					var parsed_result : Double = decodeDouble(cson_val)
					doubleparser!value_double(parsed_result)
				end
				if(cson_val == 'NULL') do
					doubleparser!error_decode()
				end
				
				cleanupJSON('&'& cson_root_value &'')
			end
		}
	}
}
