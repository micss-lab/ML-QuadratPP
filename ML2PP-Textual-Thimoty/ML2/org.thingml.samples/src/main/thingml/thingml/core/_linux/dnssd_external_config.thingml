import "../../datatypes.thingml"
import "../../thingml.thingml"
import "../dnssd_external_thing.thingml"
import "clock.thingml"


thing DNSSDController includes DNSSDMsgs, ClockMsgs {

	property isPublished : Boolean = false

	required port dnssdport {
		sends dnssd_publish_service, dnssd_unpublish_service
		receives dnssd_srv_publish_success, dnssd_srv_publish_failure, dnssd_srv_unpublish_success
	}
	
	required port signal {
        receives clock_tick
    }
    
    statechart Behavior init Init {
    	    	
    	state Init {
    	
    		internal event signal?clock_tick
    		guard isPublished
    		action dnssdport!dnssd_unpublish_service()
    		
    		internal event signal?clock_tick
    		guard not isPublished
    		action dnssdport!dnssd_publish_service()
    		
    		internal event dnssdport?dnssd_srv_publish_success
    		action do
    			print "service is published \n"
    			isPublished = true
    		end
    		
    		internal event dnssdport?dnssd_srv_unpublish_success
    		action do
    			print "service is unpublished \n"
    			isPublished = false
    		end
    
            internal event dnssdport?dnssd_srv_publish_failure
            action do
                print "could not publish, failure occurred \n"
            end
    	}

    }
}


configuration DNSSDExampleExternal {

	instance dnssd_ext : DNSSDExternal
		set dnssd_ext.service_name = "MegaPrinter"
		set dnssd_ext.service_type = "_ipp._tcp"
		set dnssd_ext.service_port = 98
	
	instance ctrl : DNSSDController
	
	instance clock : ClockLinux
		set clock.period = 5000
		
	connector ctrl.dnssdport => dnssd_ext.dnssdport
	connector ctrl.signal => clock.signal
}
