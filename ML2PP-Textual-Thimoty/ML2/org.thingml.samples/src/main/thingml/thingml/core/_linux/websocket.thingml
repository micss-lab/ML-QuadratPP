//IMPORTANT NOTE to run this example:
// 0) download and install https://github.com/warmcat/libwebsockets (follow their instructions)
//      NOTE : command 'cmake ..' must be run from the libwebsockets/build directory (build should be created manually)
//	NOTE : libssl-dev should be installed before
// 1) download and install from https://github.com/SINTEF-9012/TinyWebSockets (make installwebsockets && make && make install)
//      NOTE : both libwebsockets and TinyWebSockets should be in the same directory



//NOTE:
//make sure that the dynamic linker is set to look up /usr/local/lib
//for more details see http://lonesysadmin.net/2013/02/22/error-while-loading-shared-libraries-cannot-open-shared-object-file/

import "../websocket.thingml"
import "timer.thingml"

object WebSocketMirrorServer
@c_type "WebSocketMirrorServer*";

thing WebSMirrorServer includes WebSocketServer
@c_header "
#include <stdlib.h>
#include <cstdarg>
#include \"tinyws/client-server/WebSocketFacade.h\"
#include \"tinyws/client-server/WebSocketClient.h\"
#include \"tinyws/client-server/WebSocketMirrorServer.h\"

using namespace WebSockets;
"
{
    
    property server : WebSocketMirrorServer
    
	function on_open_callback()
		@c_prototype "void on_open_callback(void *_instance, ...)"
		@c_instance_var_name "(WebSMirrorServer_Instance *) _instance"
    do
    	'printf("\tWebSocketMirrorServer: on_open_callback");'
    	lifecycle!onOpen()
    end
    
    function on_close_callback()
		@c_prototype "void on_close_callback(void *_instance, ...)"
		@c_instance_var_name "(WebSMirrorServer_Instance *) _instance"
    do
    	'printf("\tWebSocketMirrorServer: on_close_callback");'
    	lifecycle!onClose()
    end
    
    function on_error_callback()
		@c_prototype "void on_error_callback(void *_instance, ...)"
		@c_instance_var_name "(WebSMirrorServer_Instance *) _instance"
    do
        'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* message = va_arg(arguments, char*);'
    	'va_end(arguments);'
    	'printf("\tWebSocketMirrorServer: on_error_callback with message -> %s\n", message);'
    	err!onError('message')
    end
    
    function on_message_callback()
		@c_prototype "void on_message_callback(void *_instance, ...)"
		@c_instance_var_name "(WebSMirrorServer_Instance *) _instance"
    do
        'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* message = va_arg(arguments, char*);'
    	'va_end(arguments);'
    	'printf("\tWebSocketMirrorServer: on_message_callback with message -> %s\n", message);'
    	messaging!onMessage('message')
    end
    
    function init_server()
    do
    	server = 'WebSocketFacade::InitWebSocketMirrorServer(atoi('& _port &'), NULL);'
    	'ThingMLCallback* tml_op_open_callback = new ThingMLCallback(on_open_callback, _instance);'
		'ThingMLCallback* tml_op_close_callback = new ThingMLCallback(on_close_callback, _instance);'
		'ThingMLCallback* tml_op_error_callback = new ThingMLCallback(on_error_callback, _instance);'
		'ThingMLCallback* tml_op_message_callback = new ThingMLCallback(on_message_callback, _instance);'
		''& server &'->setCallbacks(tml_op_open_callback, tml_op_close_callback, tml_op_message_callback, tml_op_error_callback);'
    end
      
    statechart behavior init Init {
    
        state Init {
            
            on entry do
            	//print("\tINIT ON PORT: " + _port)
                'printf("\tINIT ON PORT: %s\n",'& _port &');'
            	init_server()
            end
            
            transition -> Started
            event lifecycle?start_server
            
        }
        
        state Started {
            
            on entry do
            	'printf("\tserver attempts to start\n");'
            	'' & server & '->open();'
                lifecycle!server_launched()
            end
            
            transition -> Stopped
            event lifecycle?stop_server
            
        }
        
        state Stopped {
            
            on entry '' & server & '->close();'
            
            transition -> Started
            event lifecycle?start
            
        }
                
    }
    
}

object WebSocketClient
@c_type "WebSocketClient*";

thing WebSClient includes WebSocketServer
@c_header "
#include <stdlib.h>
#include <cstdarg>
#include \"tinyws/client-server/WebSocketFacade.h\"
#include \"tinyws/client-server/WebSocketClient.h\"

using namespace WebSockets;
"
{
    property client : WebSocketClient
    property _host : CString
    
    property status : WS_ERR
    
    function on_open_callback_client()
		@c_prototype "void on_open_callback_client(void *_instance, ...)"
		@c_instance_var_name "(WebSClient_Instance *) _instance"
    do
    	//print("\tWebSocketClient: on_open_callback")
    	'printf("\tWebSocketClient: on_open_callback\n");'
    	lifecycle!onOpen()
    end
    
    function on_close_callback_client()
		@c_prototype "void on_close_callback_client(void *_instance, ...)"
		@c_instance_var_name "(WebSClient_Instance *) _instance"
    do
    	//print("\tWebSocketClient: on_close_callback")
    	'printf("\tWebSocketClient: on_close_callback\n");'
    	lifecycle!onClose()
    end
    
    function on_error_callback_client()
		@c_prototype "void on_error_callback_client(void *_instance, ...)"
		@c_instance_var_name "(WebSClient_Instance *) _instance"
    do
        'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* message = va_arg(arguments, char*);'
    	'va_end(arguments);'
    	'printf("\tWebSocketClient: on_error_callback with message -> %s\n", message);'
    	err!onError('message')
    end
    
    function on_message_callback_client()
		@c_prototype "void on_message_callback_client(void *_instance, ...)"
		@c_instance_var_name "(WebSClient_Instance *) _instance"
    do
        'va_list arguments;'
        'va_start(arguments, _instance);'
        'char* message = va_arg(arguments, char*);'
    	'va_end(arguments);'
    	'printf("\tWebSocketClient: on_message_callback with message -> %s\n", message);'
    	messaging!onMessage('message')
    end
    
    function init_client()
    do
    	 client = 'WebSocketFacade::InitWebSocketClient('& _host &', atoi('& _port &'), NULL);'
    	'ThingMLCallback* tml_op_open_callback = new ThingMLCallback(on_open_callback_client, _instance);'
		'ThingMLCallback* tml_op_close_callback = new ThingMLCallback(on_close_callback_client, _instance);'
		'ThingMLCallback* tml_op_error_callback = new ThingMLCallback(on_error_callback_client, _instance);'
		'ThingMLCallback* tml_op_message_callback = new ThingMLCallback(on_message_callback_client, _instance);'
		''& client &'->setCallbacks(tml_op_open_callback, tml_op_close_callback, tml_op_message_callback, tml_op_error_callback);'
    end
    
    statechart behavior init Init {
    
        state Init {
            
            on entry do
                'printf("\tINIT CLIENT ON HOST: %s %s\n",'& _host &', '& _port& ');'
               	init_client()
            end
            
            transition -> Started
            event lifecycle?start_client
            
        }
        
        state Started {
            
            on entry do
            	'printf("\tclient attempts to establish connection\n");'
            	'' & client & '->open();'
                lifecycle!client_launched()
            end
            
            internal event s : messaging?send
            action '' & client & '->sendMessage(' & s.msg & ');'
            
            transition -> Stopped
            event lifecycle?stop_client
            
        }
        
        state Stopped {
            
            on entry '' & client & '->close();'
            
            transition -> Started
            event lifecycle?start_client
        }
                
    }
    
    
}

thing Test includes WebSocketTest, ClockMsgs {
    required port signal {
        receives clock_tick
    }
    
    property pingmessage : String = "ping message"
    
    statechart behavior init RunServer {

        internal event e : lifecycle?onOpen
        action print("test::onOpen")
        
        internal event lifecycle?onClose
        action print("test::onClose")
        
        internal event err?onError
        action print("test::onError")
        
        internal event m : messaging?onMessage
        action
        do
        	//print("test::onMessage" + m.msg)
        	'printf("test::onMessage %s\n",' & m.msg &');'
        end
        
        state RunServer {
            on entry do
                print "\trunning server...\n"
                lifecycle!start_server()
            end
            
            transition -> RunClient
            event e : lifecycle?server_launched
        }
        
        state RunClient {
            on entry do
                print "\trunning client...\n"
                lifecycle!start_client()
            end
            
            transition -> Loop
            event e : lifecycle ? client_launched
        }
        
        state Loop {
            
            transition -> Loop
            event t : signal?clock_tick
            action do
                print "sending ping...\n"
                messaging!send(pingmessage)
            end
        }
    }
}

configuration testWS
  @output_folder "/home/tmp"
  @debug "true"
  @debug_fifo "true"
  @debug_message_send ".*"
  @debug_message_receive ".*"
  @add_c_libraries "pthread websockets tinyws"
{

    instance server : WebSMirrorServer    
       set server._port = "7681"    
    instance client : WebSClient
       set client._port = "7681"
       set client._host = "localhost"
       
    instance clock : ClockLinux
    	set clock.period = 5000    
    instance test : Test
     
    connector test.signal => clock.signal
    connector test.err => client.err
    connector test.lifecycle => client.lifecycle
    connector test.messaging => client.messaging
    
    connector test.err => server.err
    connector test.lifecycle => server.lifecycle
    connector test.messaging => server.messaging
}
