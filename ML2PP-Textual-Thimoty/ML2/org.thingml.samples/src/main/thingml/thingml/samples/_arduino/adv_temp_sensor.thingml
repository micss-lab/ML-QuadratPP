//*
// Fabien Fleurey - 25/08/2011
//
// This is an example of ThingML use to generate Arduino code which uses 
// Electronic Brick components.
//  
// Requirements:
//      - lcd_screen 1602 (1)  -> Default pins (D_10, D_11, D_12, D_13, A_0, A_1, A_2)
//      - led (2)   		   ->  Default pin: D_8, D_9
// 		- Temperature sensor (1)  ->  Default pin: A_4
//
// The LED connected in D_8 is turned on if the high temperature is reached, and the D_9
// if the low temperature is reached.
//*

import "../../hardware/devices/_arduino/soft_temperature_sensor.thingml"
import "../../hardware/bricks/_arduino/led.thingml"
import "../../hardware/bricks/_arduino/lcd_screen.thingml"

thing AdvTempSensor includes SoftTemperatureSensorMsgs, LedMsgs, LcdScreenMsgs
{
	readonly property low_alarm : UInt8 = 24
	readonly property high_alarm : UInt8 = 28
	
    required port LcdScreen
    {
        sends clear, print_value, print_string, set_cursor
    }
    
	required port SoftTempSensorAlarms
	{
		sends activate_alarms, deactivate_alarms
		receives low_temp_alarm, high_temp_alarm, no_alarm
	}

	required port SoftTempSensor 
	{
	   	sends get_temperature, reset_min_max, subscribe_temperature, unsubscribe_temperature
	    receives temperature
	}
	
	required port HighLed
	{
		sends led_on, led_off
	}

	required port LowLed
	{
		sends led_on, led_off
	}

	statechart AdvTempSensorImpl init Running
	{            
		state Running
		{
            on entry do
                SoftTempSensorAlarms!activate_alarms (low_alarm, high_alarm)
                SoftTempSensor!subscribe_temperature (1000)
                end
                
			internal event SoftTempSensorAlarms?no_alarm
			action do
				HighLed!led_off ()
				LowLed!led_off ()
			end

			internal event SoftTempSensorAlarms?high_temp_alarm
			action HighLed!led_on ()
			
			internal event SoftTempSensorAlarms?low_temp_alarm
			action LowLed!led_on ()
		}

        region display init Running
    	{  		
    		state Running
    		{
    			on entry do
                    LcdScreen!print_string ("Temperature:")
                    LcdScreen!set_cursor (0, 1)
                    end
                on exit LcdScreen!clear ()
                
    			transition refresh -> Running
    			event m : SoftTempSensor?temperature
    			after LcdScreen!print_value (m.t)
    		}
    	}
    }
}

configuration AdvTempSensor
{
	group high_led : LedArduino
	set high_led.io.digital_output.pin = DigitalPin:PIN_8
	group low_led : LedArduino
	set low_led.io.digital_output.pin = DigitalPin:PIN_9

	group soft_temp_sensor : SoftTemperatureSensorArduino
	set soft_temp_sensor.temperature_sensor.io.analog_input.pin = AnalogPin:A_4
 
    instance screen : LcdScreen
     
	instance adv_temp_sensor : AdvTempSensor
	connector adv_temp_sensor.SoftTempSensor => soft_temp_sensor.soft_temperature_sensor.SoftTemperatureSensor
	//TODO: Bug with the parser on the next line
    //connector adv_temp_sensor.SoftTempSensorAlarms => soft_temp_sensor.soft_temperature_sensor.SoftTemperatureSensorAlarms
 	connector adv_temp_sensor.HighLed => high_led.led.Led
	connector adv_temp_sensor.LowLed => low_led.led.Led
    connector adv_temp_sensor.LcdScreen => screen.LcdScreen
    
}