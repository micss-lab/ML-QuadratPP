object String
	@c_type "char *"
	@c_byte_size "*"
    @js_type "String"
	@java_type "String"
    @SenML_type "String";

thing fragment HelloWorldMsgs {
    message h();
    message e();
    message l();
    message o();
    
    message msg(m : String);   
}

thing HelloWorldClient includes HelloWorldMsgs
{
    required port hello {
        sends h, e, l, o
        receives msg
    }
    
    statechart behavior init Init {
        state Init {
            
           on entry do
                hello!h()
                hello!e()
                hello!l()
                hello!l()
                hello!o()
           end
            
           internal event m : hello?msg
           guard m.m == "w" or m.m == "o" or m.m == "r" or m.m == "l" or m.m == "d"
           action do
           print(m.m)
           end
        }       
    }
}

thing HelloWorldServer includes HelloWorldMsgs {
    provided port hello @public "true"{
        receives h, e, l, o
        sends msg
    }
    
    statechart behavior init Init {
        state Init {
            transition h -> H
				event hello?h
				action hello!msg("w")
        }
        
        state H {
            transition e -> E
				event hello?e
				action hello!msg("o")
        }    
        
        state E {
            transition l -> L1
				event hello?l
				action hello!msg("r")
        }
        
        state L1 {
            transition l -> L2
				event hello?l
				action hello!msg("l")
        }
        
        state L2 {
            transition l -> Init
				event hello?o
				action hello!msg("d")
        }
        
        
        
        
        region same init Init {
        state Init {
            on exit print("w")
            transition h -> H
				event hello?h
        }
        
        state H {
            on exit print("o")      
            transition e -> E
				event hello?e
        }    
        
        state E {
            on exit print("r")
            transition l -> L1
				event hello?l
        }
        
        state L1 {
            on exit print("l")
            transition l -> L2
				event hello?l
        }
        
        state L2 {
            on exit print("d")
            transition l -> Init
				event hello?o
        }
        }
    }
}

thing HelloWorldServer2 includes HelloWorldMsgs {
    provided port hello {
        receives h, e, l, o
    }
    
    statechart behavior init Init {
        state Init {
            on exit print("w")
            transition h -> H
				event hello?h
        }
        
        state H {
            on exit print("o")      
            transition e -> E
				event hello?e
        }    
        
        state E {
            on exit print("r")
            transition l -> L1
				event hello?l
        }
        
        state L1 {
            on exit print("l")
            transition l -> L2
				event hello?l
        }
        
        state L2 {
            on exit print("d")
            transition l -> Init
				event hello?o
        }
    }
}

thing BasicHello {    
    statechart behavior init hello keeps history {
        state hello {
            on entry print("hello")    
        }
    }    
}

configuration helloWorldConf {
    instance client : HelloWorldClient    
    //instance client2 : HelloWorldClient    
    instance server : HelloWorldServer
    //instance server : HelloWorldServer2
    
    connector client.hello => server.hello
    //connector client2.hello => server.hello    
    
    
    //instance h : BasicHello
}
