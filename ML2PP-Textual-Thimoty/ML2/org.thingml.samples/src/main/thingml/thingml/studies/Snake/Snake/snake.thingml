/**
File: snake.thingml

Result: Snake game

HardWare required: 	Arduino Uno compatible board
					an adafru.it shield LCD 1.8" with joystick
					
Feature taken up: 	- lib
					- an example of poor not well thought out data structure for arduino in snakeList/_snakeList.thingml
					- an example of listner on button's change
					
TODO: compile and run 

TODO: your own app
*/

import "_snakeList.thingml"

protocol Timer @serializer "Binary";

configuration SnakeCfg 
@arduino_stdout "Serial"
{
    
    instance myList : snakeList
	instance myLCD : Adafruit_1_8pLCDShieldShield
    instance s : Snake
	
	connector myList.lcd => myLCD.lcd
	connector s.lcd => myLCD.lcd
	connector s.list => myList.list
	connector s.button => myLCD.button

	connector myLCD.timer over Timer
	connector s.timer over Timer
}

thing Snake includes Adafruit_1_8pLCDShieldClient, snakeListClient, TimerMsgs
{
	required port timer 
	{
		sends timer_start
		receives timeout
	}

	property headx : UInt8
	property heady : UInt8
	property nextmovex : UInt8
	property nextmovey : UInt8
	property applex : UInt8
	property appley : UInt8
	property timer : UInt8  = 0
	property speed : Integer = 200
	property direction : UInt8 = 2
	property lost : Boolean = false
	property score : UInt8 = 0
	
	function newApple() do
		applex = '(uint8_t) random(0, 42)'
		appley = '(uint8_t) random(0, 52)'
		lcd!drawRect('2+3*'&applex,'2+3*'&appley,2,2,'0xF800')
	end
	
	statechart ArduinoSketchStateChart init Setup {
		state Setup {
			transition -> Menu event lcd?LCDready
		}
		state Menu {
			on entry do
				print "[Snake] Menu\n"
				lcd!clear()
                lcd!drawRect(1,1,127,157,'0xFFFF')
                lcd!set_cursor(16,68)
                lcd!print_str("Welcome to Snake!")
                lcd!set_cursor(12,78)
                lcd!print_str("Press the joystick")
                lcd!set_cursor(40,88)
                lcd!print_str("to start")
			end
			transition -> Game event e : button?button_state_change
		}

		composite state Game init Init {
			state Init {
				on entry do
				print "[Snake] Game Init\n"
					lcd!clear()
	                lcd!drawRect(1,1,127,157,'0xFFFF')
					direction = 2
					lost = false
					score = 0
					headx = 21
					heady = 26
					list!flush()
					list!addHead(21,26)
					list!refreshPrintList()
					//newApple()
					timer!timer_start(timer, speed)
				end
				transition -> NewApple event e : timer?timeout
			}
			
			state Control {
				on entry do
				print "[Snake] Game Control\n"
					if(direction == 1) do
						nextmovex = headx
						nextmovey = heady + 1
						heady = heady + 1
					end
					if(direction == 2) do
						nextmovex = headx + 1
						nextmovey = heady
						headx = headx + 1
					end
					if(direction == 4) do
						nextmovex = headx
						nextmovey = heady - 1
						heady = heady - 1
					end
					if(direction == 5) do
						nextmovex = headx - 1
						nextmovey = heady
						headx = headx - 1
					end
					if ((nextmovex > 41) or (nextmovey > 51)) do
						lost = true
						//arduino!serial_print_str("[Snake] met a wall\n")
					end
					list!isInSnake(nextmovex, nextmovey)
				end
				
				internal event e : button?button_state_change action do
					if((e.bstate == 1) or (e.bstate == 2) or (e.bstate == 4) or (e.bstate == 5)) do
						direction = e.bstate
					end
				end
				
				transition -> Move event e : list?isInSnakeResponse guard (not(lost) and not(e.b))
				transition -> End event e : list?isInSnakeResponse guard (lost or e.b)
				
			}
			
			state Move {
				on entry do
				print "[Snake] Game Move\n"
					list!addHead(nextmovex,nextmovey)
					
					timer!timer_start(timer, speed)
				end
				
				internal event e : button?button_state_change action do
					if((e.bstate == 1) or (e.bstate == 2) or (e.bstate == 4) or (e.bstate == 5)) do
						direction = e.bstate
					end
				end
				
				transition -> NewApple event e : timer?timeout guard ((nextmovex == applex) and (nextmovey == appley)) action do
						score = score + 1
					list!refreshPrintList()
				end
				
				transition -> Control event e : timer?timeout guard (not(nextmovex == applex) or not(nextmovey == appley)) action do
					list!dropTail()
					list!refreshPrintList()
				end
			}
		
			state NewApple {
				on entry do
				print "[Snake] Game New apple\n"
					applex = '(uint8_t) random(0, 42)'
					appley = '(uint8_t) random(0, 52)'
					list!isInSnake(applex, appley)
				end
				
				transition -> NewApple event e : list?isInSnakeResponse guard e.b
				transition -> Control event e : list?isInSnakeResponse guard not(e.b) action do
					lcd!drawRect('2+3*'&applex,'2+3*'&appley,2,2,'0xF800')
				end
			}
		
			state End {
				on entry do
					//arduino!serial_print_str("Snake Ended\n")
					lcd!clear()
	                lcd!drawRect(1,1,127,157,'0xFFFF')
	                lcd!set_cursor(16,68)
	                lcd!print_str("You scored: ")
	                lcd!print_num(score)
	                lcd!set_cursor(12,78)
	                lcd!print_str("Press the joystick")
	                lcd!set_cursor(22,88)
	                lcd!print_str("to start again")
				end

				transition -> Init event e : button?button_state_change
			}
		}
	}
}
