import "../lib/TronMsgs.thingml"

configuration GatewayCfg 
@c_dyn_connectors "32"
@c_dyn_connectors_lib "true"
{
	instance p0 : PortSerie
	set p0.Master = true
	set p0.p0 = 'GatewayCfg_p0_var.id_Intern'
	set p0.p1 = 'GatewayCfg_p1_var.id_Intern'
	set p0.p2 = 'GatewayCfg_p2_var.id_Intern'
	set p0.p3 = 'GatewayCfg_p3_var.id_Intern'

	instance p1 : PortSerie
	instance p2 : PortSerie
	instance p3 : PortSerie

	instance proto : Prototype
	
	connector p0.Intern => proto.Intern
	connector p1.Intern => proto.Intern
	connector p2.Intern => proto.Intern
	connector p3.Intern => proto.Intern


	connector p0.Extern over Serial
	@trace_level "0"
	connector p1.Extern over Serial1
	@trace_level "0"
	connector p2.Extern over Serial2
	@trace_level "0"
	connector p3.Extern over Serial3
	@trace_level "0"
	
}

thing Prototype includes TronMsgs {
	
	provided port Intern {
		sends addHead, loose, tronReady, tronGo, hasID, iHaveID, mayIHaveID
		receives addHead, loose, tronReady, tronGo, hasID, iHaveID, mayIHaveID
	}
	statechart Empty init E{
		state E {}
	}
}

thing PortSerie includes TronMsgs
{
	property Master : Boolean = false
	property p0 : UInt16 = 0
	property p1 : UInt16 = 0
	property p2 : UInt16 = 0
	property p3 : UInt16 = 0

	required port Extern {
		sends addHead, loose, tronReady, tronGo, hasID, iHaveID, mayIHaveID
		receives addHead, loose, tronReady, tronGo, hasID, iHaveID, mayIHaveID
	}
	required port Intern {
		sends addHead, loose, tronReady, tronGo, hasID, iHaveID, mayIHaveID
		receives addHead, loose, tronReady, tronGo, hasID, iHaveID, mayIHaveID
	}
	
	statechart PortChart init Active {
		on entry do
			if(Master) do
				'GatewayCfg_dyn_connect('&p0&','&p1&');'
				'GatewayCfg_dyn_connect('&p0&','&p2&');'
				'GatewayCfg_dyn_connect('&p0&','&p3&');'

				'GatewayCfg_dyn_connect('&p1&','&p2&');'
				'GatewayCfg_dyn_connect('&p1&','&p3&');'

				'GatewayCfg_dyn_connect('&p2&','&p3&');'
			end
		end

		state Active {
			internal event e : Extern?addHead action do
				Intern!addHead(e.x, e.y, e.id)
			end
			internal event e : Extern?loose action do
				Intern!loose(e.id)
			end
			internal event e : Extern?tronReady action do
				Intern!tronReady(e.id)
			end
			internal event e : Extern?tronGo action do
				Intern!tronGo(e.nbID)
			end
			internal event e : Extern?hasID action do
				Intern!hasID(e.id)
			end
			internal event e : Extern?iHaveID action do
				Intern!iHaveID(e.id)
			end
			internal event e : Extern?mayIHaveID action do
				Intern!mayIHaveID(e.id)
			end


			internal event e : Intern?addHead action do
				Extern!addHead(e.x, e.y, e.id)
			end
			internal event e : Intern?loose action do
				Extern!loose(e.id)
			end
			internal event e : Intern?tronReady action do
				Extern!tronReady(e.id)
			end
			internal event e : Intern?tronGo action do
				Extern!tronGo(e.nbID)
			end
			internal event e : Intern?hasID action do
				Extern!hasID(e.id)
			end
			internal event e : Intern?iHaveID action do
				Extern!iHaveID(e.id)
			end
			internal event e : Intern?mayIHaveID action do
				Extern!mayIHaveID(e.id)
			end
		}
	}
}

