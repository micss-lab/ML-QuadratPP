import "../lib/Msgs.thingml"
import "../lib/_Datatypes.thingml"

protocol Serial1
	@serial_path_to_device "/dev/ttyATH0"
	@serial_baudrate "115200"

configuration MotorsControllerCfg 
@c_dyn_connectors "*"
{
	instance motors : MotorsController
	
	connector motors.CPU over Serial1
}


thing MotorsController includes Msgs {
	property EnableA : UInt8 = 7 // Left Motor
	property InputA1 : UInt8 = 9
	property InputA2 : UInt8 = 8
	
	property EnableB : UInt8 = 10 // Right Motor
	property InputB1 : UInt8 = 12
	property InputB2 : UInt8 = 11


	required port CPU {
		receives Forward, Left, Right, Backward, Stop
		sends MotorsReady
	}

	statechart MotorsControllerChart init Stop {
		on entry do
			'pinMode('&EnableA&',OUTPUT);'
			'pinMode('&InputA1&',OUTPUT);'
			'pinMode('&InputA2&',OUTPUT);'
			
			'pinMode('&EnableB&',OUTPUT);'
			'pinMode('&InputB1&',OUTPUT);'
			'pinMode('&InputB2&',OUTPUT);'
			CPU!MotorsReady()
		end
		
		state Listening {

			transition -> Forward event CPU?Forward
			transition -> Left event CPU?Left
			transition -> Right event CPU?Right
			transition -> Backward event CPU?Backward
			transition -> Stop event CPU?Stop
		}
		
		state Stop {
			on entry do
				'digitalWrite('&EnableA&', LOW);'
				'digitalWrite('&EnableB&', LOW);'
			end
			transition -> Listening
		}
	
		state Forward {
			on entry do
				'digitalWrite('&EnableA&', HIGH);'
				'digitalWrite('&InputA1&', LOW);'
				'digitalWrite('&InputA2&', HIGH);'
			
				'digitalWrite('&EnableB&', HIGH);'
				'digitalWrite('&InputB1&', LOW);'
				'digitalWrite('&InputB2&', HIGH);'
			end
			transition -> Listening
		}
	
		state Left {
			on entry do
				'digitalWrite('&EnableA&', HIGH);'
				'digitalWrite('&InputA1&', HIGH);'
				'digitalWrite('&InputA2&', LOW);'
			
				'digitalWrite('&EnableB&', HIGH);'
				'digitalWrite('&InputB1&', LOW);'
				'digitalWrite('&InputB2&', HIGH);'
			end
			transition -> Listening
		}
	
		state Right {
			on entry do
				'digitalWrite('&EnableA&', HIGH);'
				'digitalWrite('&InputA1&', LOW);'
				'digitalWrite('&InputA2&', HIGH);'
			
				'digitalWrite('&EnableB&', HIGH);'
				'digitalWrite('&InputB1&', HIGH);'
				'digitalWrite('&InputB2&', LOW);'
			end
			transition -> Listening
		}
	
		state Backward {
			on entry do
				'digitalWrite('&EnableA&', HIGH);'
				'digitalWrite('&InputA1&', HIGH);'
				'digitalWrite('&InputA2&', LOW);'
			
				'digitalWrite('&EnableB&', HIGH);'
				'digitalWrite('&InputB1&', HIGH);'
				'digitalWrite('&InputB2&', LOW);'
			end
			transition -> Listening
		}
	}
}
