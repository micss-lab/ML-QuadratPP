/*
	File: _Arduino.thingml
	Goal: This library provide an abstraction layer between an Arduino Uno and the ThinML Language.
	Warning: In order to work properly, this library use one of the 3 Hardware Timers of the arduino. 
			 While in use, some other functions using the same timer might not work properly. Here is a
			 list of the most common functions using the different timers:
			 	- timer0: delay, millis, micro
			 	- timer1: Servo, SoftwareSerial
			 	- timer2: tone
			 By default, the timer2 is used. Feel free to uncomment an other one and comment timer2 related function.
			 (timer0 is not yet tested and might uncounter problem because of the use of mills function)
*/

import "_Datatypes.thingml"

thing ArduinoMsgs {
	
	message ready();
	message 4ms_interrupt();
	message 100ms_interrupt();
	message 1s_poll();
	
	message timeout(id : UInt8);
	message timer_start(id: UInt8, time: Integer);
	message timer_cancel(id : UInt8);
}


thing ArduinoScheduler includes ArduinoMsgs, ThingMLSchedulerMsg 
@c_header "
#define NB_SOFT_TIMERS 4 // for 4 different timers, 0 to 3. change here to get more or less timers.
"
@c_global "
struct ArduinoScheduler_Instance *_ArduinoScheduler_instance;
uint8_t interrupt_counter = 0;
"
{

	provided port arduino
	@sync_send "true" // Do not queue messages to make sure interrupts are executed right away.
	{
		sends ready
		
		sends 4ms_interrupt, 100ms_interrupt, 1s_poll
		
		receives timer_start, timer_cancel
		sends timeout
	}
	
	required port polling {
		receives setup, poll
	}
	
	property interrupt_counter : UInt8 = 0
	
	function initialize_timer2() do
		'// Store the instance in a global variable so that the interrupt routine can use it
		_ArduinoScheduler_instance = _instance;
		
		// Run timer2 interrupt up counting at 250kHz 
		 TCCR2A = 0;
		 TCCR2B = 1<<CS22 | 0<<CS21 | 0<<CS20;
		
		 //Timer2 Overflow Interrupt Enable
		 TIMSK2 |= 1<<TOIE2;
		'
	end
	
	function timer2_overflow_interrupt() 
	@c_prototype "SIGNAL(TIMER2_OVF_vect)"
	@c_instance_var_name "_ArduinoScheduler_instance"
	do
		
		'TCNT2 = 5; // Leave 250 tics until overflow (1 overflow every 1ms)'
		'interrupt_counter++;'
		if ('interrupt_counter >= 99') do 
			arduino!100ms_interrupt()
			'interrupt_counter=0;'
		end
		if ('interrupt_counter % 4') do 
			arduino!4ms_interrupt()
		end
		
	end

	statechart ArduinoSchedulerStateChart init ACTIVE {
		property timers : Long['NB_SOFT_TIMERS'] 
		property prev_1sec : Long

		internal event polling?setup action do
			//initialize_timer0()
			//initialize_timer1()
			initialize_timer2()
			prev_1sec = 'millis()' + 1000
			arduino!ready()
		end
		
		internal event polling?poll action do
			var tms : Long = 'millis()'
			// Handle timers
			var t : UInt8 = 0
			while (t < 'NB_SOFT_TIMERS') do
				if (timers[t] > 0 and timers[t] < tms) do 
					timers[t] = 0 
					arduino!timeout(t) 
				end
				t = t + 1
			end
			// Handle the 1s poll
			if (prev_1sec < tms) do
				prev_1sec = prev_1sec + 1000
				arduino!1s_poll()
			end
		end
		
		internal event e : arduino?timer_start action do
			if(e.id < 'NB_SOFT_TIMERS') timers[e.id] = 'millis()' + e.time - 1 
		end
		
		internal event e : arduino?timer_cancel action do
			if(e.id < 'NB_SOFT_TIMERS') timers[e.id] = 0
		end

		
		state ACTIVE {}

	}
}

thing fragment ArduinoApplication includes ArduinoMsgs, ThingMLSchedulerMsg {
	required port arduino 
	@sync_send "true" // Do not queue messages to make sure timers are updated right away.
	{
		receives ready
		receives 4ms_interrupt, 100ms_interrupt, 1s_poll
		
		sends timer_start, timer_cancel
		receives timeout
	}
}
