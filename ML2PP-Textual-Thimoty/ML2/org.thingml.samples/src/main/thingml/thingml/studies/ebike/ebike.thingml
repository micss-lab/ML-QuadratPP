
// Definition of some primitive types used throuout the application
datatype Integer<2>	
	@c_type "int"
	@java_type "short";



thing EBike {

	// Raw ADC values
	message GetADC(pin : Integer) @code "11"
		@sync_response "ADCValue#v" @timeout "500" @retry "0";
	message ADCValue(v : Integer) @code "12";
	
	// Subscribe for monitoring data
	message subscribePower(interval : Integer) @code "21";
	message subscribeTemp(interval : Integer) @code "22";
	message subscribeDist(interval : Integer) @code "23";
	
	message powerData(i : Integer, v : Integer, p : Integer, ah : Integer) @code "24";
	message tempData(ctrl : Integer, air : Integer) @code "25";
	message distData(speed : Integer, dist : Integer) @code "26";
	
	// Querry for monitoring data
	message getCurrent() @code "31"
		@sync_response "CurrentValue#v" @timeout "500" @retry "0";
	message CurrentValue(v : Integer) @code "32";
	
	message getVoltage() @code "33"
		@sync_response "VoltageValue#v" @timeout "500" @retry "0";
	message VoltageValue(v : Integer) @code "34";
	
	message getPower() @code "35"
		@sync_response "PowerValue#v" @timeout "500" @retry "0";
	message PowerValue(v : Integer) @code "36";
	
	message getAh() @code "45"
		@sync_response "PowerValue#v" @timeout "500" @retry "0";
	message AhValue(v : Integer) @code "46";
	
	message getCtrlTemp() @code "37"
		@sync_response "CtrlTempValue#v" @timeout "500" @retry "0";
	message CtrlTempValue(v : Integer) @code "38";
	
	message getAirTemp() @code "39"
		@sync_response "AirTempValue#v" @timeout "500" @retry "0";
	message AirTempValue(v : Integer) @code "40";
	
	message getSpeed() @code "41"
		@sync_response "SpeedValue#v" @timeout "500" @retry "0";
	message SpeedValue(v : Integer) @code "42";
	
	message getDist() @code "43"
		@sync_response "DistValue#v" @timeout "500" @retry "0";
	message DistValue(v : Integer) @code "44";
	
	// Ping Protocol
	message ping() @code "66"
		@sync_ack "pong" @timeout "1000" @retry "3";
	message pong() @code "67";
	
	provided port ADC {
		receives GetADC
		sends ADCValue
	}

	provided port Monitoring {
		sends powerData, tempData, distData
		receives subscribePower, subscribeTemp, subscribeDist
	}
	
	provided port Sensors {
		receives getAirTemp, getCtrlTemp, getCurrent, getDist, getPower, getSpeed, getVoltage
		sends AirTempValue, CtrlTempValue, CurrentValue, DistValue, PowerValue, SpeedValue, VoltageValue
	}
	
	provided port ping {
		sends pong
		receives ping
	}
}
