//Arbitraty datatypes can be defined and mapped to concrete types
object String
@java_type "String"
@js_type "String";

thing fragment HelloMsgs {
    message hello(world : String); //Messages have a Java-ish syntax, but are asynchronous
    message bye();
}

thing Hello includes HelloMsgs {
    
    /*function Hello(world : String) do
        helloEN(world)
        helloFR(world)
    end
    
    function helloEN(world : String) do
        print "Hello "
        print world
        print "!\n"    
    end
    
    function helloFR(world : String) do
        print "Bonjour "
        print world
        print " !\n"        
    end
    
    function Bye() do
        byeEN()
        byeFR()
    end
    
    function byeEN() do
        print "Bye!\n"  
    end
    
    function byeFR() do
        print "Au revoir !\n"
    end*/
    
    provided port Greeting {//A port corresponds to a provided/require services
        receives hello, bye      //it defined an abstract protocol (set of messages to be received/sent)
    }
    
    statechart greet init Wait {//Semantics of statecharts is aligned with UML (the syntax is textual, however) 
        
        state Wait {
            on entry do
                print "Welcome to the ThingML tutorial at MODELS 2015 in Ottawa...\n"
            end
            
            transition -> Greet
        }
        
        state Greet {
            transition -> Greet
            event h : Greeting?hello
            action do
                print "Hello "
                print h.world
                print "!\n"
                //Hello(h.world)
            end
            
            transition -> Bye
            event Greeting?bye
        }    
        
        state Bye {
            on entry /*Bye()*/ print "Bye!\n"
        }
        
        /*
        region French init Wait {
            state Wait {
                on entry do
                    print "Bienvenue au tutoriel ThingML à MODELS 2015 à Ottawa...\n"
                end
            
                transition -> Greet
            }
        
            state Greet {
                transition -> Greet
                event h : Greeting?hello
                action do
                    print "Bonjour "
                    print h.world
                    print " !\n"
                end
            
                transition -> Bye
                event Greeting?bye
            }    
        
            state Bye {
                on entry print "Au revoir !\n"
            }            
        }*/
        
    }  
}

thing SimpleHelloClient includes HelloMsgs {

    required port Greet {
        sends hello, bye    
    }
    
    statechart greet init Franck {
        
        state Franck {
            on entry Greet!hello("Franck")
            
            transition -> Brice
        }    
        
        state Brice {
            on entry Greet!hello("Brice")
            
            transition -> Bye
        } 
        
        state Bye {
            on entry Greet!bye()   
        }   
    }
            
}

configuration hello @debug "true" {
    instance hello : Hello    
    instance client : SimpleHelloClient
    
    connector client.Greet => hello.Greeting
}
