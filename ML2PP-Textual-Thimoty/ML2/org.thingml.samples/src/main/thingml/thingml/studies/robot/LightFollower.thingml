import "2WDBase.thingml"
import "Bumper.thingml"
import "../../hardware/io/analog_input.thingml"
import "../../hardware/bricks/led.thingml"


enumeration Obstacle	
    @java_type "byte"
    @c_byte_size "1"
	@c_type "uint8_t"
{
	NONE @enum_val "0"
	LEFT @enum_val "1"
	RIGHT @enum_val "2"
	FRONT @enum_val "3"
}

thing LightFollower includes TwoWDBaseMsg, AnalogInputMsgs, TimerMsgs, LedMsgs, BumperMsg
{
 	required port TwoWDBase {
 		 sends set_motors_speed, stop
 	}
 	
 	property left_speed : Int16 = 0
	property right_speed : Int16 = 0
 	
 	required port RightLight {
 		receives analog_input_value
 	}
 	
 	required port LeftLight {
 		receives analog_input_value
 	}
 	
 	property left_light : Int16 = 0
	property right_light : Int16 = 0
 	
 	required port Timer {
 		 sends timer_start, timer_cancel
 		 receives timer_timeout
 	}
    
    required port FrontBumper {
        receives bump_left, bump_right
    }	
    
    required port Led {
        sends led_on, led_toggle
    }	
 
 	function follow_light() do
 		var diff : Int16 = (left_light - right_light) / 2
 		if (diff > 50) diff = 50
        if (diff < -50) diff = -50
 		left_speed = 127 - diff
 		right_speed = 127 + diff
		TwoWDBase!set_motors_speed(left_speed, right_speed)
	end
	
	statechart LightFollowerImpl init Init
	{	
        property obstacle : Obstacle = Obstacle:NONE
        
        on entry Led!led_on()
		
		internal event m : RightLight?analog_input_value 
		action right_light = m.value
		
		internal event m : LeftLight?analog_input_value 
		action left_light = m.value

        state Init {
            
            on entry Timer!timer_start(500)
            
            transition -> SeekLight event Timer?timer_timeout
        }

		
		state SeekLight {
		
			on entry Timer!timer_start(25)
			
			transition -> SeekLight event Timer?timer_timeout
			action do 
                Led!led_toggle()
                follow_light()
            end
            
            transition -> AvoidObstacle event FrontBumper?bump_left
            action obstacle = Obstacle:LEFT
            
            transition -> AvoidObstacle event FrontBumper?bump_right
            action obstacle = Obstacle:RIGHT
            
		}
		
		composite state AvoidObstacle init back {

			on entry TwoWDBase!stop()
			
			state back {
				on entry do 
					TwoWDBase!set_motors_speed(-75, -75)
					Timer!timer_cancel()
					Timer!timer_start(1000)
				end
				
				transition -> turn event Timer?timer_timeout
			}
			
			state turn {
				on entry do 
					if (obstacle == Obstacle:RIGHT) TwoWDBase!set_motors_speed(-60, 60)
                    if (not (obstacle == Obstacle:RIGHT)) TwoWDBase!set_motors_speed(60, -60)
					Timer!timer_start(750)
				end
                
                transition -> turn event Timer?timer_timeout
                action do
                    TwoWDBase!set_motors_speed(0, 0)
                    Timer!timer_start(250)
                    obstacle = Obstacle:NONE
                end
			}
			
			transition -> SeekLight event Timer?timer_timeout
            guard obstacle == Obstacle:NONE
		}
	}
}