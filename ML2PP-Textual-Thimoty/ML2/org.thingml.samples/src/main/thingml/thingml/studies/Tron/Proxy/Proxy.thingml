import "../lib/TronMsgs.thingml"

protocol Serial @serializer "Binary"
		@serial_baudrate "115200"
		@serial_path_to_device "/dev/ttyACM0";

/*protocol Websocket @serializer "JSON"
		@websocket_client "true"
		@websocket_server_address "10.218.149.59"*/

protocol MQTT @serializer "JSON"
		@platform "x86"
		@mqtt_broker_address "10.218.149.59"
		@mqtt_port_number "9000"

configuration ProxyCfg {
	instance p : repeater

	connector p.p1 over Serial
	connector p.p2 over MQTT
}

thing repeater includes TronMsgs {
	property pID : UInt8
	required port p1 {
		sends hasID, iHaveID, mayIHaveID, tronReady, tronGo, addHead, loose
		receives hasID, iHaveID, mayIHaveID, tronReady, tronGo, addHead, loose
	}
	required port p2 {
		sends hasID, iHaveID, mayIHaveID, tronReady, tronGo, addHead, loose
		receives hasID, iHaveID, mayIHaveID, tronReady, tronGo, addHead, loose
	}

	statechart Chart init S {
		on entry print "[Repeater] Start\n"

			internal event e: p1?hasID
			action p2!hasID(e.id)

			internal event e: p1?iHaveID
			action p2!iHaveID(e.id)

			internal event e: p1?mayIHaveID
			action p2!mayIHaveID(e.id)

			internal event e: p1?tronReady
			action p2!tronReady(e.id)

			internal event e: p1?tronGo
			action p2!tronGo(e.nbID)

			internal event e: p1?addHead
			action p2!addHead(e.x, e.y, e.id)

			internal event e: p1?loose
			action p2!loose(e.id)



			internal event e: p2?hasID
			action p1!hasID(e.id)

			internal event e: p2?iHaveID
			action p1!iHaveID(e.id)

			internal event e: p2?mayIHaveID
			action p1!mayIHaveID(e.id)

			internal event e: p2?tronReady
			action p1!tronReady(e.id)

			internal event e: p2?tronGo
			action p1!tronGo(e.nbID)

			internal event e: p2?addHead
			action p1!addHead(e.x, e.y, e.id)

			internal event e: p2?loose
			action p1!loose(e.id)

		state S{}
	}
}


