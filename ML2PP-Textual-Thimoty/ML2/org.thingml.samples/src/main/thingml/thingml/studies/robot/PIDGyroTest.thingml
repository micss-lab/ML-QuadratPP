import "2WDBase.thingml"
import "Bumper.thingml"
import "../../hardware/io/analog_input.thingml"
import "../../hardware/bricks/led.thingml"
import "../../hardware/devices/analog_gyro.thingml"

thing PIDGyroTest includes TwoWDBaseMsg, AnalogInputMsgs, TimerMsgs, LedMsgs, BumperMsg, AnalogGyroMsg
{
 	required port TwoWDBase {
 		 sends set_motors_speed, stop
 	}
 	
 	property left_speed : Int16 = 0
	property right_speed : Int16 = 0
 	
 	required port Gyro {
 		sends callibrate_gyro
        receives gyro_ready, gyro_data
 	}
 	
 	required port Timer {
 		 sends timer_start, timer_cancel
 		 receives timer_timeout
 	}
    
    required port Led {
        sends led_on, led_off, led_toggle
    }	
	
	statechart PIDGyroTestImpl init Init
	{	
        
        state Init {
            
            on entry Timer!timer_start(2000) // Let the gyro power up
            
            internal event Timer?timer_timeout
            action do 
            	Gyro!callibrate_gyro()
            	Led!led_on()
            end
            
            transition -> KeepHeading event Gyro?gyro_ready
        }

		
		state KeepHeading {
		
			on entry Led!led_off()
			
			internal event m : Gyro?gyro_data
			action do 
                Led!led_toggle()
                // PID controller with 2 * P + 1/2 * I + 0 * D
		        var ctrl : Int16 = m.yaw_rate * 2 + m.gyro_heading / 2
                ctrl = (ctrl * 2) / 3
		        if (ctrl > -20 and ctrl < 20) ctrl = 0 // Cancel noise
				TwoWDBase!set_motors_speed(-ctrl, ctrl) // Turn without moving
            end
            
		}
		
	}
}