import "../lib/Msgs.thingml"
//import "../lib/_Datatypes.thingml"

protocol Serial1
	@serial_path_to_device "/dev/ttyATH0"
	@serial_baudrate "115200"

protocol Websocket

configuration CPUWSControllerCfg
@c_compiler "/openwrt-yun/staging_dir/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-gcc"
@add_c_libraries "websockets"
@add_c_libraries "ssl"
@add_c_libraries "crypto"
@add_c_libraries "z"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/lib"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/lib"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/include"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/include"
@c_dyn_connectors "*"
{
	instance c : CPUForwarder
	
	connector c.MCU over Serial1
	
	connector c.WS over Websocket
	@generate_debugGUI "true"
}

thing CPUForwarder includes Msgs
{
	
	required port MCU {
		sends Forward, Left, Right, Backward, Stop
		receives MotorsReady
	}
	
	required port WS {
		receives Forward, Left, Right, Backward, Stop
		sends MotorsReady, GoingForward, RotatingLeft, GoingBackward, RotatingRight, Stopped
	}
	
	statechart CPUForwarder init Init {
		state Init {
			on entry do
				print "[CPU] Init\n"
			end
			transition -> Running
		}
		
		state Running {
			internal event MCU?MotorsReady action do
				WS!MotorsReady()
				print "[CPU] MotorsReady\n"
			end
			internal event WS?Forward action do
				MCU!Forward()
				WS!GoingForward()
				print "[CPU] Forward\n"
			end
			internal event WS?Left action do
				MCU!Left()
				WS!RotatingLeft()
				print "[CPU] Left\n"
			end
			internal event WS?Right action do
				MCU!Right()
				WS!RotatingRight()
				print "[CPU] Right\n"
			end
			internal event WS?Backward action do
				MCU!Backward()
				WS!GoingBackward()
				print "[CPU] Backward\n"
			end
			internal event WS?Stop action do
				MCU!Stop()
				WS!Stopped()
				print "[CPU] Stop\n"
			end
		}
	}
}

