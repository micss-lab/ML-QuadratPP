import "../../thingml.thingml"

thing fragment A
{
	abstract function FF(c : Char) : Integer

	property A : Integer = FF('A')
}

thing fragment B includes A
{
	property B : Integer = FF('B')
}

thing fragment InitMsgs
{
	message InitMsg(c : Char)
}

thing Initializer includes InitMsgs, B
{	
	required port InitPort {
		sends InitMsg
	}
	
	function FF(c : Char) : Integer do
		InitPort!InitMsg(c)
		return 1
	end
} 



thing TestPropertiesInitOrder includes Test, InitMsgs
@test " # (AB|BA)"
{
	provided port InitPort {
		receives InitMsg
	}

	statechart TestPropertyInitExecutionOrder init I {
		state I {
			internal event m : InitPort?InitMsg
			action TestOut(m.c)
			
			internal event Test?Done
			action TestDone()
		}
	}
}

configuration conf {
	instance i : Initializer
	instance test : TestPropertiesInitOrder
	
	connector i.InitPort => test.InitPort
}